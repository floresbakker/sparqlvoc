prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix decl: <http://www.w3.org/ns/sparql#model/decl/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rule: <http://www.w3.org/ns/sparql#model/rule/>
prefix section: <https://www.w3.org/TR/sparql11-query/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix shp: <http://www.w3.org/ns/sparql#model/shp/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix sparql: <http://www.w3.org/ns/sparql#model/def/>
prefix standard: <http://www.w3.org/ns/sparql#model/>
prefix status: <http://purl.org/adms/status/>
prefix target: <http://www.w3.org/ns/sparql#model/target/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xml: <http://www.w3.org/XML/1998/namespace#> 
prefix xsd: <http://www.w3.org/2001/XMLSchema#>


  sparql:
    a
      owl:Ontology,
      void:Dataset;
    dct:created '2023-10-29'^^xsd:date;
    dct:creator
      'Flores Bakker',
      'Wouter Beek';
    dct:language 'iso639-1:en';
    dct:license 'http://creativecommons.org/licenses/by/4.0'^^xsd:anyURI;
    dct:publisher <https://rijksfinancien.nl>;
    dct:status status:UnderDevelopment;
    dct:subject 'SPARQL'@en;
    dct:title 'SPARQL Vocabulary'@en;
    dct:source <https://github.com/floresbakker/sparqlvoc>;
    dct:abstract "SPARQL Vocabulary"@en;
    dct:description "SPARQL Vocabulary"@en;
    foaf:depiction 'https://www.rijksfinancien.nl/themes/custom/indicia_theme/files/logo-rijksoverheid.svg'^^xsd:anyURI;
    foaf:homepage 'https://www.rijksfinancien.nl/'^^xsd:anyURI;
    owl:imports
      dct:,
      owl:,
      rdf:,
      rdfs:,
      skos:;
    sh:declare
      decl:sparql,
      decl:prov,
      decl:rdf,
      decl:rdfs,
      decl:xsd;      
    owl:versionInfo '0.1.0';
    vann:preferredNamespacePrefix 'sparql';
    vann:preferredNamespaceUri 'http://www.w3.org/ns/sparql#model/def/';
    void:uriRegexPattern '^http://www.w3.org/ns/sparql#model/def/';
    void:uriSpace 'http://www.w3.org/ns/sparql#model/def/'^^xsd:anyURI.

  decl:sparql
    sh:prefix "sparql";
    sh:namespace "http://www.w3.org/ns/sparql#model/def/"^^xsd:anyURI.

  decl:prov
    sh:prefix "prov";
    sh:namespace "http://www.w3.org/ns/prov#"^^xsd:anyURI.

  decl:rdf
    sh:prefix "rdf";
    sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI.

  decl:rdfs
    sh:prefix "rdfs";
    sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI.

  decl:xsd
    sh:prefix "xsd";
    sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI.

  standard:sparql
    a dct:Standard;
    dct:created '2024-04-07'^^xsd:date;
    dct:source 'https://www.w3.org/TR/sparql11-query/'^^xsd:anyURI;
    skos:prefLabel 'SPARQL'@en;
    rdfs:isDefinedBy sparql:.

### Sections from the SPARQL Specification

  section:Tree
    a dcm:Text;
    dct:isPartOf standard:sparql;
    dct:source 'https://sparql.org/#node-trees'^^xsd:anyURI;
    skos:prefLabel 'Tree'@en;
    rdfs:isDefinedBy sparql:.

  
### SPARQL

sparql:AbstractSyntaxTree
  a owl:Class;
  dct:conformsTo section:Tree;
  skos:definition 'An abstract syntax tree is an object that represents a SPARQL query unit. A tree consists of connected nodes.'@en;
  skos:prefLabel 'Abstract Syntax Tree'@en;
  rdfs:isDefinedBy sparql:.

sparql:Node
  a owl:Class;
  dct:conformsTo section:Node;
  skos:definition 'A node is an object within the SPARQL abstract syntax tree.'@en;
  skos:prefLabel 'Node'@en;
  rdfs:isDefinedBy sparql:.

sparql:NonTerminalNode
  a owl:Class;
  rdfs:subClassOf sparql:Node;
  dct:conformsTo section:StructuralNode;
  skos:definition 'A node that represents a structural component in the SPARQL abstract syntax tree.'@en;
  skos:prefLabel 'Non-terminal node'@en;
  rdfs:isDefinedBy sparql:.

sparql:TerminalNode
  a owl:Class;
  rdfs:subClassOf sparql:Node;  
  dct:conformsTo section:TerminalNode;
  skos:definition 'A node that represents a syntactical component in the SPARQL abstract syntax tree, i.e. a keyword or symbol.'@en;
  skos:prefLabel 'Terminal node'@en;
  rdfs:isDefinedBy sparql:.

sparql:Keyword
  a owl:Class;
  rdfs:subClassOf sparql:TerminalNode;  
  dct:conformsTo section:Keyword;
  skos:definition 'A keyword in the SPARQL syntax.'@en;
  skos:prefLabel 'Keyword'@en;
  rdfs:isDefinedBy sparql:.

sparql:Symbol
  a owl:Class;
  rdfs:subClassOf sparql:TerminalNode;  
  dct:conformsTo section:Symbol;
  skos:definition 'A symbol in the SPARQL syntax.'@en;
  skos:prefLabel 'Symbol'@en;
  rdfs:isDefinedBy sparql:.

sparql:SymbolSequence
  a owl:Class;
  rdfs:subClassOf sparql:TerminalNode;  
  dct:conformsTo section:SymbolSequence;
  skos:definition 'A symbol sequence in the SPARQL syntax.'@en;
  skos:prefLabel 'Symbol sequence'@en;
  skos:example '''"?s" or "<https://example.org>"''';
  rdfs:isDefinedBy sparql:.

sparql:CharacterSequence
  a owl:Class;
  rdfs:subClassOf sparql:TerminalNode;  
  dct:conformsTo section:CharacterSequence;
  skos:definition 'A character sequence in the SPARQL syntax.'@en;
  skos:prefLabel 'Character sequence'@en;
  skos:example '''"s" in "?s" or "https://example.org" in "<https://example.org>"''';
  rdfs:isDefinedBy sparql:.
  
sparql:QueryUnit
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:QueryUnit;
  skos:definition "Represents the unit of a query in SPARQL. It is the root node in the SPARQL abstract syntax tree."@en;
  skos:prefLabel "Query Unit"@en;
  rdfs:isDefinedBy sparql:.

sparql:Query
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Query;
  skos:definition "Represents a SPARQL query with various forms such as Select, Construct, Describe, and Ask."@en;
  skos:prefLabel "Query"@en;
  rdfs:isDefinedBy sparql:.

sparql:UpdateUnit
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;  
  dct:conformsTo section:UpdateUnit;
  skos:definition "Represents the unit of an update in SPARQL."@en;
  skos:prefLabel "Update Unit"@en;
  rdfs:isDefinedBy sparql:.

sparql:Prologue
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Prologue;
  skos:definition "Represents the prologue of a SPARQL query, which includes base and prefix declarations."@en;
  skos:prefLabel "Prologue"@en;
  rdfs:isDefinedBy sparql:.

sparql:BaseDecl
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:BaseDecl;
  skos:definition "Represents a BASE declaration with an IRI in SPARQL."@en;
  skos:prefLabel "Base Declaration"@en;
  rdfs:isDefinedBy sparql:.
  
sparql:Base
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Base;
  skos:definition "Represents the BASE keyword in a SPARQL query."@en;
  skos:prefLabel "BASE keyword"@en;
  sparql:syntax 'BASE';
  rdfs:isDefinedBy sparql:.

sparql:Prefix
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Prefix;
  skos:definition "Represents the PREFIX keyword in a SPARQL query."@en;
  skos:prefLabel "PREFIX keyword"@en;
  sparql:syntax 'PREFIX';
  rdfs:isDefinedBy sparql:.

sparql:ArgList
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ArgList;
  skos:definition "Represents an ArgList in SPARQL."@en;
  skos:prefLabel "ArgList"@en;
  rdfs:isDefinedBy sparql:.
  
sparql:IRI
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:IRI;
  skos:definition "Represents an IRI in SPARQL."@en;
  skos:prefLabel "IRI"@en;
  rdfs:isDefinedBy sparql:.

sparql:IRIRef
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:IRIRef;
  skos:definition "Represents an IRIRef in SPARQL."@en;
  skos:prefLabel "IRI reference"@en;
  rdfs:isDefinedBy sparql:.

sparql:Nil
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Nil;
  skos:definition "Represents a Nil in SPARQL."@en;
  skos:prefLabel "Nil"@en;
  rdfs:isDefinedBy sparql:.

sparql:IRIValue
  a owl:Class;
  rdfs:subClassOf sparql:CharacterSequence;
  dct:conformsTo section:IRIValue;
  skos:definition "Represents an IRI value in SPARQL."@en;
  skos:prefLabel "IRI value"@en;
  rdfs:isDefinedBy sparql:.

sparql:PrefixedName
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:PrefixedName;
  skos:definition "Represents a prefixed name in SPARQL."@en;
  skos:prefLabel "Prefixed name"@en;
  rdfs:isDefinedBy sparql:.

sparql:PrefixDecl
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:PrefixDecl;
  skos:definition "Represents a PREFIX declaration with a namespace prefix and IRI in SPARQL."@en;
  skos:prefLabel "Prefix Declaration"@en;
  rdfs:isDefinedBy sparql:.

sparql:PNAME_LN
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:PNAME_LN;
  skos:definition "Represents an PNAME_LN in a SPARQL prefix declaration."@en;
  skos:prefLabel "PNAME_LN"@en;
  rdfs:isDefinedBy sparql:.    

sparql:PNAME_NS
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:PNAME_NS;
  skos:definition "Represents an PNAME_NS in a SPARQL prefix declaration."@en;
  skos:prefLabel "PNAME_NS"@en;
  rdfs:isDefinedBy sparql:.  

sparql:PN_PREFIX
  a owl:Class;
  rdfs:subClassOf sparql:CharacterSequence;
  dct:conformsTo section:PN_PREFIX;
  skos:definition "Represents an PN_PREFIX in a SPARQL prefix declaration."@en;
  skos:prefLabel "PN_PREFIX"@en;
  rdfs:isDefinedBy sparql:.  

sparql:PN_LOCAL
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:PN_LOCAL;
  skos:definition "Represents an PN_LOCAL in SPARQL."@en;
  skos:prefLabel "PN_LOCAL"@en;
  rdfs:isDefinedBy sparql:.  
  
sparql:SelectQuery
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:SelectQuery;
  skos:definition "Represents a SELECT query in SPARQL with optional DISTINCT/REDUCED and WHERE clause."@en;
  skos:prefLabel "Select Query"@en;
  rdfs:isDefinedBy sparql:.

sparql:SubSelect
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:SubSelect;
  skos:definition "Represents a sub-select query in SPARQL with select, where, and solution modifier clauses."@en;
  skos:prefLabel "Sub Select"@en;
  rdfs:isDefinedBy sparql:.

sparql:SelectClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:SelectClause;
  skos:definition "Represents a SELECT clause in SPARQL, specifying variables or expressions."@en;
  skos:prefLabel "Select Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Select
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Select;
  skos:definition "Represents the SELECT keyword in SPARQL."@en;
  skos:prefLabel "SELECT keyword"@en;
  sparql:syntax 'SELECT';
  rdfs:isDefinedBy sparql:.

sparql:Distinct
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Distinct;
  skos:definition "Represents the DISTINCT keyword in SPARQL."@en;
  skos:prefLabel "DISTINCT keyword"@en;
  sparql:syntax 'DISTINCT';
  rdfs:isDefinedBy sparql:.

sparql:Reduced
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Reduced;
  skos:definition "Represents the REDUCED keyword in SPARQL."@en;
  skos:prefLabel "REDUCED keyword"@en;
  sparql:syntax 'REDUCED';
  rdfs:isDefinedBy sparql:.

sparql:As
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:As;
  skos:definition "Represents the AS keyword in a SPARQL query."@en;
  skos:prefLabel "AS keyword"@en;
  sparql:syntax 'AS';
  rdfs:isDefinedBy sparql:.

sparql:Variable
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Variable;
  skos:definition "Represents a variable in a select clause in SPARQL."@en;
  skos:prefLabel "Variable in select clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Variable1
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Variable;
  skos:definition "Represents a variable in a select clause in SPARQL with the question mark notation."@en;
  skos:prefLabel "Variable in select clause with question mark"@en;
  sparql:syntax '?';
  rdfs:isDefinedBy sparql:.

sparql:Variable2
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Variable;
  skos:definition "Represents a variable in a select clause in SPARQL with the dollar notation."@en;
  skos:prefLabel "Variable in select clause with dollar symbol"@en;
  sparql:syntax '$';
  rdfs:isDefinedBy sparql:.  

sparql:Wildcard
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:Wildcard;
  skos:definition "Represents a wildcard in a select clause in SPARQL."@en;
  skos:prefLabel "Wildcard in select clause"@en;
  sparql:syntax '*';
  rdfs:isDefinedBy sparql:.

sparql:Colon
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:Colon;
  skos:definition "Represents a colon in a SPARQL query."@en;
  skos:prefLabel "Colon in a SPARQL query"@en;
  sparql:syntax ':';  
  rdfs:isDefinedBy sparql:.

sparql:SemiColon
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:SemiColon;
  skos:definition "Represents a semicolon in a SPARQL query."@en;
  skos:prefLabel "Semicolon in a SPARQL query"@en;
  sparql:syntax ';';  
  rdfs:isDefinedBy sparql:.

sparql:Period
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:Period;
  skos:definition "Represents a period in a SPARQL query."@en;
  skos:prefLabel "Period in a SPARQL query"@en;
  sparql:syntax '.';  
  rdfs:isDefinedBy sparql:.

sparql:OpenCurlyBracket
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:OpenCurlyBracket;
  skos:definition "Represents an open curly bracket in a SPARQL query."@en;
  skos:prefLabel "Open curly bracket in a SPARQL query"@en;
  sparql:syntax '{';  
  rdfs:isDefinedBy sparql:.

sparql:ClosedCurlyBracket
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:ClosedCurlyBracket;
  skos:definition "Represents a closed curly bracket in a SPARQL query."@en;
  skos:prefLabel "Closed curly bracket in a SPARQL query"@en;
  sparql:syntax '}';  
  rdfs:isDefinedBy sparql:.

sparql:OpenParenthesis
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:OpenParenthesis;
  skos:definition "Represents an open parenthises in a SPARQL query."@en;
  skos:prefLabel "Open parenthesis in a SPARQL query"@en;
  sparql:syntax '(';  
  rdfs:isDefinedBy sparql:.

sparql:ClosedParenthesis
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:ClosedParenthesis;
  skos:definition "Represents a closed parenthesis in a SPARQL query."@en;
  skos:prefLabel "Closed parenthesis in a SPARQL query"@en;
  sparql:syntax ')';  
  rdfs:isDefinedBy sparql:.    

sparql:OpenSquareBracket
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:OpenSquareBracket;
  skos:definition "Represents an open square bracket in a SPARQL query."@en;
  skos:prefLabel "Open square bracket in a SPARQL query"@en;
  sparql:syntax '[';  
  rdfs:isDefinedBy sparql:.

sparql:ClosedSquareBracket
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:ClosedSquareBracket;
  skos:definition "Represents a closed square bracket in a SPARQL query."@en;
  skos:prefLabel "Closed square bracket in a SPARQL query"@en;
  sparql:syntax ']';  
  rdfs:isDefinedBy sparql:.

sparql:PlusSign
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:PlusSign;
  skos:definition "Represents a plus sign in a SPARQL query."@en;
  skos:prefLabel "Plus sign in a SPARQL query"@en;
  sparql:syntax '+';  
  rdfs:isDefinedBy sparql:.

sparql:MinusSign
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:MinusSign;
  skos:definition "Represents a minus sign in a SPARQL query."@en;
  skos:prefLabel "Minus sign in a SPARQL query"@en;
  sparql:syntax '-';  
  rdfs:isDefinedBy sparql:.

sparql:MultiplicationSign
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:MultiplicationSign;
  skos:definition "Represents a multiplication sign in a SPARQL query."@en;
  skos:prefLabel "Multiplication sign in a SPARQL query"@en;
  sparql:syntax '*';  
  rdfs:isDefinedBy sparql:.

sparql:DivisionSign
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:DivisionSign;
  skos:definition "Represents a division sign in a SPARQL query."@en;
  skos:prefLabel "Division sign in a SPARQL query"@en;
  sparql:syntax '/';  
  rdfs:isDefinedBy sparql:.
  
sparql:LessThan
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:LessThan;
  skos:definition "Represents a less than symbol in a SPARQL query."@en;
  skos:prefLabel "Less than symbol in a SPARQL query"@en;
  sparql:syntax '<';  
  rdfs:isDefinedBy sparql:.

sparql:GreaterThan
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:GreaterThan;
  skos:definition "Represents a greater than symbol in a SPARQL query."@en;
  skos:prefLabel "Greater than symbol in a SPARQL query"@en;
  sparql:syntax '>';  
  rdfs:isDefinedBy sparql:.

sparql:Equal
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:Equal;
  skos:definition "Represents an equal symbol in a SPARQL query."@en;
  skos:prefLabel "Equal symbol in a SPARQL query"@en;
  sparql:syntax '=';  
  rdfs:isDefinedBy sparql:.

sparql:NotEqual
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:NotEqual;
  skos:definition "Represents a not-equal symbol in a SPARQL query."@en;
  skos:prefLabel "Equal symbol in a SPARQL query"@en;
  sparql:syntax '!=';  
  rdfs:isDefinedBy sparql:.
  
sparql:ExclamationMark
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:ExclamationMark;
  skos:definition "Represents an exclamation mark in a SPARQL query."@en;
  skos:prefLabel "Exclamation mark in a SPARQL query"@en;
  sparql:syntax '!';  
  rdfs:isDefinedBy sparql:.

sparql:QuestionMark
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:QuestionMark;
  skos:definition "Represents a question mark in a SPARQL query."@en;
  skos:prefLabel "Question mark in a SPARQL query"@en;
  sparql:syntax '?';  
  rdfs:isDefinedBy sparql:.

sparql:Caret
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:Caret;
  skos:definition "Represents a caret in a SPARQL query."@en;
  skos:prefLabel "Caret in a SPARQL query"@en;
  sparql:syntax '^';  
  rdfs:isDefinedBy sparql:.

sparql:And
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:And;
  skos:definition "Represents the AND symbol in a SPARQL query."@en;
  skos:prefLabel "AND symbol in a SPARQL query"@en;
  sparql:syntax '&&';  
  rdfs:isDefinedBy sparql:.

sparql:Or
  a owl:Class;
  rdfs:subClassOf sparql:Symbol;
  dct:conformsTo section:Or;
  skos:definition "Represents the OR symbol in a SPARQL query."@en;
  skos:prefLabel "OR symbol in a SPARQL query"@en;
  sparql:syntax '||';  
  rdfs:isDefinedBy sparql:.

sparql:Expression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Expression;
  skos:definition 'Represents conditions used in filters, comparisons, or mathematical expressions.'@en;
  skos:prefLabel 'Expression'@en;
  rdfs:isDefinedBy sparql:.

sparql:ConstructQuery
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ConstructQuery;
  skos:definition "Represents a CONSTRUCT query in SPARQL, which constructs new RDF triples."@en;
  skos:prefLabel "Construct Query"@en;
  rdfs:isDefinedBy sparql:.

sparql:Construct
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Construct;
  skos:definition "Represents the CONSTRUCT keyword in a SPARQL query."@en;
  skos:prefLabel "CONSTRUCT keyword"@en;
  sparql:syntax 'CONSTRUCT';
  rdfs:isDefinedBy sparql:.  

sparql:DescribeQuery
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:DescribeQuery;
  skos:definition "Represents a DESCRIBE query in SPARQL, returning descriptions of resources."@en;
  skos:prefLabel "Describe Query"@en;
  rdfs:isDefinedBy sparql:.

sparql:Describe
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Describe;
  skos:definition "Represents the DESCRIBE keyword in a SPARQL query."@en;
  skos:prefLabel "DESCRIBE keyword"@en;
  sparql:syntax 'DESCRIBE';
  rdfs:isDefinedBy sparql:.    

sparql:AskQuery
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:AskQuery;
  skos:definition "Represents an ASK query in SPARQL, which returns a boolean result."@en;
  skos:prefLabel "Ask Query"@en;
  rdfs:isDefinedBy sparql:.

sparql:Ask
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Ask;
  skos:definition "Represents the ASK keyword in a SPARQL query."@en;
  skos:prefLabel "ASK keyword"@en;
  sparql:syntax 'ASK';
  rdfs:isDefinedBy sparql:.  

sparql:DatasetClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:DatasetClause;
  skos:definition "Represents a dataset clause in SPARQL, specifying a graph from which to query."@en;
  skos:prefLabel "Dataset Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:From
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:From;
  skos:definition "Represents the FROM keyword in a SPARQL query."@en;
  skos:prefLabel "FROM keyword"@en;
  sparql:syntax 'FROM';
  rdfs:isDefinedBy sparql:.  
  
sparql:DefaultGraphClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:DefaultGraphClause;
  skos:definition "Represents a default graph clause in SPARQL, specifying the source selector."@en;
  skos:prefLabel "Default Graph Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:NamedGraphClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:NamedGraphClause;
  skos:definition "Represents a named graph clause in SPARQL, specifying the source selector."@en;
  skos:prefLabel "Named Graph Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Named
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Named;
  skos:definition "Represents the Named keyword in a SPARQL query."@en;
  skos:prefLabel "NAMED keyword"@en;
  sparql:syntax 'NAMED';
  rdfs:isDefinedBy sparql:.  
  
sparql:SourceSelector
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:SourceSelector;
  skos:definition "Represents a source selector in SPARQL, identifying a graph using an IRI."@en;
  skos:prefLabel "Source Selector"@en;
  rdfs:isDefinedBy sparql:.

sparql:WhereClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:WhereClause;
  skos:definition "Represents a WHERE clause in SPARQL, containing graph patterns to match."@en;
  skos:prefLabel "Where Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Where
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Where;
  skos:definition "Represents a WHERE keyword in SPARQL."@en;
  skos:prefLabel "WHERE keyword"@en;
  sparql:syntax 'WHERE';
  rdfs:isDefinedBy sparql:.

sparql:SolutionModifier
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:SolutionModifier;
  skos:definition "Represents a solution modifier in SPARQL, modifying the result set (e.g., LIMIT, OFFSET)."@en;
  skos:prefLabel "Solution Modifier"@en;
  rdfs:isDefinedBy sparql:.

sparql:GroupGraphPattern
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:GroupGraphPattern;
  skos:definition "Represents a group graph pattern in SPARQL, containing a set of graph patterns that must all match."@en;
  skos:prefLabel "Group Graph Pattern"@en;
  rdfs:isDefinedBy sparql:.

sparql:GroupGraphPatternSub
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:GroupGraphPatternSub;
  skos:definition "Represents a group graph pattern sub in SPARQL, containing a set of graph patterns that must all match."@en;
  skos:prefLabel "Group Graph Pattern Sub"@en;
  rdfs:isDefinedBy sparql:.

sparql:TriplesBlock
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:TriplesBlock;
  skos:definition "Represents a triple block in SPARQL."@en;
  skos:prefLabel "Triples Block"@en;
  rdfs:isDefinedBy sparql:.

sparql:GraphPatternNotTriples
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:GraphPatternNotTriples;
  skos:definition "Represents graph patterns in SPARQL that are not simple triple patterns, such as optional and union patterns."@en;
  skos:prefLabel "Graph Pattern Not Triples"@en;
  rdfs:isDefinedBy sparql:.

sparql:TriplesSameSubjectPath 
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:TriplesSameSubjectPath;
  skos:definition ".."@en;
  skos:prefLabel "Triples Same Subject Path"@en;
  rdfs:isDefinedBy sparql:. 

sparql:VarOrTerm
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:VarOrTerm;
  skos:definition ".."@en;
  skos:prefLabel "Var or Term"@en;
  rdfs:isDefinedBy sparql:. 

sparql:GraphTerm
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:VarOrTerm;
  skos:definition ".."@en;
  skos:prefLabel "Graph term"@en;
  rdfs:isDefinedBy sparql:.   

sparql:PropertyListPathNotEmpty
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:PropertyListPathNotEmpty;
  skos:definition ".."@en;
  skos:prefLabel "Property List Path Not Empty"@en;
  rdfs:isDefinedBy sparql:. 
  
sparql:VerbSimple
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:VerbSimple;
  skos:definition ".."@en;
  skos:prefLabel "Verb Simple"@en;
  rdfs:isDefinedBy sparql:. 

sparql:ObjectListPath
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ObjectListPath;
  skos:definition ".."@en;
  skos:prefLabel "Object List Path"@en;
  rdfs:isDefinedBy sparql:.  
  
sparql:ObjectPath
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ObjectPath;
  skos:definition ".."@en;
  skos:prefLabel "Object Path"@en;
  rdfs:isDefinedBy sparql:.   

sparql:TriplesNodePath
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:TriplesNodePath;
  skos:definition ".."@en;
  skos:prefLabel "Triples Node Path"@en;
  rdfs:isDefinedBy sparql:.   

sparql:CollectionPath 
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:CollectionPath ;
  skos:definition ".."@en;
  skos:prefLabel "Collection Path"@en;
  rdfs:isDefinedBy sparql:.  

sparql:GraphNodePath
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:GraphNodePath;
  skos:definition ".."@en;
  skos:prefLabel "Graph Node Path"@en;
  rdfs:isDefinedBy sparql:.    

sparql:BlankNodePropertyListPath  
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:BlankNodePropertyListPath   ;
  skos:definition ".."@en;
  skos:prefLabel "Blank Node Property List Path"@en;
  rdfs:isDefinedBy sparql:.  

sparql:OptionalGraphPattern
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:OptionalGraphPattern;
  skos:definition "Represents an OPTIONAL graph pattern in SPARQL, which extends the result set with additional values if a pattern exists."@en;
  skos:prefLabel "Optional Graph Pattern"@en;
  rdfs:isDefinedBy sparql:.

sparql:Optional
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Optional;
  skos:definition "Represents the OPTIONAL keyword in a SPARQL query."@en;
  skos:prefLabel "OPTIONAL keyword"@en;
  sparql:syntax 'OPTIONAL';
  rdfs:isDefinedBy sparql:.  

sparql:GraphGraphPattern
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:GraphGraphPattern;
  skos:definition "Represents a GRAPH graph pattern in SPARQL, specifying a named graph to match."@en;
  skos:prefLabel "Graph Graph Pattern"@en;
  rdfs:isDefinedBy sparql:.
  
sparql:Graph
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Graph;
  skos:definition "Represents the GRAPH keyword in a SPARQL query."@en;
  skos:prefLabel "GRAPH keyword"@en;
  sparql:syntax 'GRAPH';
  rdfs:isDefinedBy sparql:.    

sparql:ServiceGraphPattern
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ServiceGraphPattern;
  skos:definition "Represents a SERVICE graph pattern in SPARQL, specifying a remote SPARQL endpoint to query."@en;
  skos:prefLabel "Service Graph Pattern"@en;
  rdfs:isDefinedBy sparql:.

sparql:Service
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Service;
  skos:definition "Represents the SERVICE keyword in a SPARQL query."@en;
  skos:prefLabel "SERVICE keyword"@en;
  sparql:syntax 'SERVICE';
  rdfs:isDefinedBy sparql:.    

sparql:BindClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:BindClause;
  skos:definition "Represents a BIND clause in SPARQL, binding a value to a variable in the result set."@en;
  skos:prefLabel "Bind clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Bind
  a owl:Class;
  rdfs:subClassOf sparql:TerminalNode;
  dct:conformsTo section:Bind;
  skos:definition "Represents the BIND keyword in SPARQL."@en;
  skos:prefLabel "Bind"@en;
  sparql:syntax "BIND";
  rdfs:isDefinedBy sparql:.  

sparql:InlineData
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:InlineData;
  skos:definition "Represents an inline data block in SPARQL, providing explicit values for variables in the query."@en;
  skos:prefLabel "Inline Data"@en;
  rdfs:isDefinedBy sparql:.

sparql:Values
  a owl:Class;
  rdfs:subClassOf sparql:TerminalNode;
  dct:conformsTo section:Values;
  skos:definition "Represents the VALUES keyword in SPARQL."@en;
  skos:prefLabel "Values"@en;
  sparql:syntax "VALUES";
  rdfs:isDefinedBy sparql:.  

sparql:MinusGraphPattern
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:MinusGraphPattern;
  skos:definition "Represents a MINUS graph pattern in SPARQL, which removes certain solutions from the result set."@en;
  skos:prefLabel "Minus Graph Pattern"@en;
  rdfs:isDefinedBy sparql:.

sparql:Minus
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Minus;
  skos:definition "Represents the MINUS keyword in a SPARQL query."@en;
  skos:prefLabel "MINUS keyword"@en;
  sparql:syntax 'MINUS';
  rdfs:isDefinedBy sparql:.  

sparql:FilterClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:FilterClause;
  skos:definition "Represents a FILTER clause in SPARQL, applying constraints to the result set based on a boolean condition."@en;
  skos:prefLabel "Filter clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Filter
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Filter;
  skos:definition "Represents the FILTER keyword in a SPARQL query."@en;
  skos:prefLabel "FILTER keyword"@en;
  sparql:syntax 'FILTER';
  rdfs:isDefinedBy sparql:.  

sparql:Constraint
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Constraint;
  skos:definition "Represents a constraint clause in SPARQL."@en;
  skos:prefLabel "Constraint clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:BrackettedExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:BrackettedExpression;
  skos:definition "Represents a bracketted expression clause in SPARQL."@en;
  skos:prefLabel "BrackettedExpression clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:ConditionalOrExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ConditionalOrExpression;
  skos:definition "Represents a conditional or expression clause in SPARQL."@en;
  skos:prefLabel "ConditionalOrExpression clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:ConditionalAndExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ConditionalAndExpression;
  skos:definition "Represents a conditional and expression clause in SPARQL."@en;
  skos:prefLabel "ConditionalOrExpression clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:ValueLogical
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ValueLogical;
  skos:definition "Represents a value logical clause in SPARQL."@en;
  skos:prefLabel "ValueLogical clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:RelationalExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:RelationalExpression;
  skos:definition "Represents a relational expression clause in SPARQL."@en;
  skos:prefLabel "RelationalExpression clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:NumericExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:NumericExpression;
  skos:definition "Represents a numeric expression clause in SPARQL."@en;
  skos:prefLabel "NumericExpression clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:ExpressionList
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ExpressionList;
  skos:definition "Represents an expression list clause in SPARQL."@en;
  skos:prefLabel "ExpressionList clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:AdditiveExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:AdditiveExpression;
  skos:definition "Represents a numeric expression clause in SPARQL."@en;
  skos:prefLabel "AdditiveExpression clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:MultiplicativeExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:MultiplicativeExpression;
  skos:definition "Represents a multiplicative expression clause in SPARQL."@en;
  skos:prefLabel "MultiplicativeExpression clause"@en;
  rdfs:isDefinedBy sparql:.  

sparql:NumericLiteralPositive
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:NumericLiteralPositive;
  skos:definition "Represents a numeric literal positive in SPARQL."@en;
  skos:prefLabel "NumericLiteralPositive clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:NumericLiteralNegative
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:NumericLiteralNegative;
  skos:definition "Represents a numeric literal negative in SPARQL."@en;
  skos:prefLabel "NumericLiteralNegative clause"@en;
  rdfs:isDefinedBy sparql:.    

sparql:NumericLiteralUnsigned
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:NumericLiteralUnsigned;
  skos:definition "Represents a numeric literal unsigned in SPARQL."@en;
  skos:prefLabel "NumericLiteralUnsigned clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:UnaryExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:UnaryExpression;
  skos:definition "Represents an unary expression clause in SPARQL."@en;
  skos:prefLabel "UnaryExpression clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:PrimaryExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:PrimaryExpression;
  skos:definition "Represents a primary expression clause in SPARQL."@en;
  skos:prefLabel "PrimaryExpression clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:SubstringExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:SubstringExpression;
  skos:definition "Represents a substring expression clause in SPARQL."@en;
  skos:prefLabel "SubstringExpression clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:StrReplaceExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:StrReplaceExpression;
  skos:definition "Represents a StrReplaceExpression clause in SPARQL."@en;
  skos:prefLabel "StrReplaceExpression clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:RegexExpression
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:RegexExpression;
  skos:definition "Represents a RegexExpression clause in SPARQL."@en;
  skos:prefLabel "RegexExpression clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:ExistsFunc
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ExistsFunc;
  skos:definition "Represents a ExistsFunc clause in SPARQL."@en;
  skos:prefLabel "ExistsFunc clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:NotExistsFunc
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:NotExistsFunc;
  skos:definition "Represents a NotExistsFunc clause in SPARQL."@en;
  skos:prefLabel "NotExistsFunc clause"@en;
  rdfs:isDefinedBy sparql:. 
  
sparql:BuiltInCall
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:BuiltInCall;
  skos:definition "Represents a built in call clause in SPARQL."@en;
  skos:prefLabel "BuiltInCall clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:IriOrFunction
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:IriOrFunction;
  skos:definition "Represents an IRI or Function clause in SPARQL."@en;
  skos:prefLabel "IriOrFunction clause"@en;
  rdfs:isDefinedBy sparql:. 
   
sparql:RDFLiteral
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:RDFLiteral;
  skos:definition "Represents a RDF literal clause in SPARQL."@en;
  skos:prefLabel "RDFLiteral clause"@en;
  rdfs:isDefinedBy sparql:.    

sparql:NumericLiteral
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:NumericLiteral;
  skos:definition "Represents a numeric literal clause in SPARQL."@en;
  skos:prefLabel "NumericLiteral clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:BooleanLiteral
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:BooleanLiteral;
  skos:definition "Represents a Boolean Literal clause in SPARQL."@en;
  skos:prefLabel "BooleanLiteral clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Aggregate
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Aggregate;
  skos:definition "Represents an aggregate clause in SPARQL."@en;
  skos:prefLabel "Aggregate clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:String
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:String;
  skos:definition "Represents a string clause in SPARQL."@en;
  skos:prefLabel "String clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Langtag
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Langtag;
  skos:definition "Represents a langtag clause in SPARQL."@en;
  skos:prefLabel "Langtag clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Langtag
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Langtag;
  skos:definition "Represents a langtag clause in SPARQL."@en;
  skos:prefLabel "Langtag clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:STRING_LITERAL1
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:STRING_LITERAL1;
  skos:definition "Represents a langtag clause in SPARQL."@en;
  skos:prefLabel "STRING_LITERAL1 clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:STRING_LITERAL2
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:STRING_LITERAL2;
  skos:definition "Represents a langtag clause in SPARQL."@en;
  skos:prefLabel "STRING_LITERAL2 clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:STRING_LITERAL_LONG1
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:STRING_LITERAL_LONG1;
  skos:definition "Represents a STRING_LITERAL_LONG1 clause in SPARQL."@en;
  skos:prefLabel "STRING_LITERAL_LONG1 clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:STRING_LITERAL_LONG2
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:STRING_LITERAL_LONG2;
  skos:definition "Represents a STRING_LITERAL_LONG2 clause in SPARQL."@en;
  skos:prefLabel "STRING_LITERAL_LONG2 clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Integer
  a owl:Class;
  rdfs:subClassOf sparql:CharacterSequence;
  dct:conformsTo section:Integer;
  skos:definition "Represents a Integer clause in SPARQL."@en;
  skos:prefLabel "Integer clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Double
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Double;
  skos:definition "Represents a Double clause in SPARQL."@en;
  skos:prefLabel "Double clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Decimal
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Decimal;
  skos:definition "Represents a Decimal clause in SPARQL."@en;
  skos:prefLabel "Decimal clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Exponent
  a owl:Class;
  rdfs:subClassOf sparql:CharacterSequence;
  dct:conformsTo section:Exponent;
  skos:definition "Represents a Exponent clause in SPARQL."@en;
  skos:prefLabel "Exponent clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Integer_Positive
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Integer_Positive;
  skos:definition "Represents a Integer Positive clause in SPARQL."@en;
  skos:prefLabel "Integer Positive clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Decimal_Positive
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Decimal_Positive;
  skos:definition "Represents a Decimal Positive clause in SPARQL."@en;
  skos:prefLabel "Decimal Positive clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Double_Positive
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Double_Positive;
  skos:definition "Represents a Double Positive clause in SPARQL."@en;
  skos:prefLabel "Double Positive clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Integer_Negative
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Integer_Negative;
  skos:definition "Represents a Integer Negative clause in SPARQL."@en;
  skos:prefLabel "Integer Negative clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Decimal_Negative
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Decimal_Negative;
  skos:definition "Represents a Decimal Negative clause in SPARQL."@en;
  skos:prefLabel "Decimal Negative clause"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Double_Negative
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Double_Negative;
  skos:definition "Represents a Double Negative clause in SPARQL."@en;
  skos:prefLabel "Double Negative clause"@en;
  rdfs:isDefinedBy sparql:. 
  
sparql:BlankNode
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:BlankNode ;
  skos:definition ".."@en;
  skos:prefLabel "Blank Node"@en;
  rdfs:isDefinedBy sparql:.  

sparql:BlankNodeLabel
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:BlankNodeLabel ;
  skos:definition ".."@en;
  skos:prefLabel "Blank Node"@en;
  rdfs:isDefinedBy sparql:. 

sparql:Anon
  a owl:Class;
  rdfs:subClassOf sparql:SymbolSequence;
  dct:conformsTo section:Anon ;
  skos:definition ".."@en;
  skos:prefLabel "Anon"@en;
  rdfs:isDefinedBy sparql:. 
  
sparql:TriplesTemplate
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:TriplesTemplate;
  skos:definition "Represents a triple template in SPARQL, used in CONSTRUCT queries to create RDF triples."@en;
  skos:prefLabel "Triples Template"@en;
  rdfs:isDefinedBy sparql:.

sparql:GroupClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:GroupClause;
  skos:definition "Represents a GROUP BY clause in SPARQL, grouping results by specified expressions."@en;
  skos:prefLabel "Group Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Group
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Group;
  skos:definition "Represents the GROUP keyword in a SPARQL query."@en;
  skos:prefLabel "GROUP keyword"@en;
  sparql:syntax 'GROUP';
  rdfs:isDefinedBy sparql:.  

sparql:By
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:By;
  skos:definition "Represents the BY keyword in a SPARQL query."@en;
  skos:prefLabel "BY keyword"@en;
  sparql:syntax 'BY';
  rdfs:isDefinedBy sparql:.    

sparql:HavingClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:HavingClause;
  skos:definition "Represents a HAVING clause in SPARQL, applying constraints on the result set after grouping."@en;
  skos:prefLabel "Having Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Having
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Having;
  skos:definition "Represents the HAVING keyword in a SPARQL query."@en;
  skos:prefLabel "HAVING keyword"@en;
  sparql:syntax 'HAVING';
  rdfs:isDefinedBy sparql:.  

sparql:OrderClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:OrderClause;
  skos:definition "Represents an ORDER BY clause in SPARQL, specifying the order of solutions in the result set."@en;
  skos:prefLabel "Order Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Order
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Order;
  skos:definition "Represents the ORDER keyword in a SPARQL query."@en;
  skos:prefLabel "ORDER keyword"@en;
  sparql:syntax 'ORDER';
  rdfs:isDefinedBy sparql:.  
  
sparql:OrderCondition
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:OrderCondition;
  skos:definition "Represents a condition used in an ORDER BY clause to determine the order of the result set."@en;
  skos:prefLabel "Order Condition"@en;
  rdfs:isDefinedBy sparql:.

sparql:ASC
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:ASC;
  skos:definition "Represents the ASC keyword in a SPARQL query."@en;
  skos:prefLabel "ASC keyword"@en;
  sparql:syntax 'ASC';
  rdfs:isDefinedBy sparql:.

sparql:DESC
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:DESC;
  skos:definition "Represents the DESC keyword in a SPARQL query."@en;
  skos:prefLabel "DESC keyword"@en;
  sparql:syntax 'DESC';
  rdfs:isDefinedBy sparql:.    

sparql:LimitClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:LimitClause;
  skos:definition "Represents a LIMIT clause in SPARQL, specifying the maximum number of solutions to return."@en;
  skos:prefLabel "Limit Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Limit
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Limit;
  skos:definition "Represents the LIMIT keyword in a SPARQL query."@en;
  skos:prefLabel "LIMIT keyword"@en;
  sparql:syntax 'LIMIT';
  rdfs:isDefinedBy sparql:.    

sparql:OffsetClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:OffsetClause;
  skos:definition "Represents an OFFSET clause in SPARQL, specifying the number of solutions to skip in the result set."@en;
  skos:prefLabel "Offset Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Offset
  a owl:Class;
  rdfs:subClassOf sparql:Keyword;
  dct:conformsTo section:Offset;
  skos:definition "Represents the OFFSET keyword in a SPARQL query."@en;
  skos:prefLabel "OFFSET keyword"@en;
  sparql:syntax 'OFFSET';
  rdfs:isDefinedBy sparql:.    

sparql:ValuesClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:ValuesClause;
  skos:definition "Represents a VALUES clause in SPARQL, providing explicit values for variables within the query."@en;
  skos:prefLabel "Values Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:Update
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Update;
  skos:definition "Represents a SPARQL update request, modifying data in the RDF store."@en;
  skos:prefLabel "Update"@en;
  rdfs:isDefinedBy sparql:.

sparql:Update1
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Update1;
  skos:definition "Represents a single update operation within an update request in SPARQL."@en;
  skos:prefLabel "Update1"@en;
  rdfs:isDefinedBy sparql:.

sparql:Load
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Load;
  skos:definition "Represents a LOAD operation in SPARQL, loading RDF data into a graph from a source."@en;
  skos:prefLabel "Load"@en;
  rdfs:isDefinedBy sparql:.

sparql:Clear
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Clear;
  skos:definition "Represents a CLEAR operation in SPARQL, removing all data from a specified graph."@en;
  skos:prefLabel "Clear"@en;
  rdfs:isDefinedBy sparql:.

sparql:Drop
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Drop;
  skos:definition "Represents a DROP operation in SPARQL, removing a graph from the dataset."@en;
  skos:prefLabel "Drop"@en;
  rdfs:isDefinedBy sparql:.

sparql:Create
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Create;
  skos:definition "Represents a CREATE operation in SPARQL, creating an empty graph in the dataset."@en;
  skos:prefLabel "Create"@en;
  rdfs:isDefinedBy sparql:.

sparql:Add
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Add;
  skos:definition "Represents an ADD operation in SPARQL, adding triples from one graph to another."@en;
  skos:prefLabel "Add"@en;
  rdfs:isDefinedBy sparql:.

sparql:Move
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Move;
  skos:definition "Represents a MOVE operation in SPARQL, moving triples from one graph to another."@en;
  skos:prefLabel "Move"@en;
  rdfs:isDefinedBy sparql:.

sparql:Copy
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Copy;
  skos:definition "Represents a COPY operation in SPARQL, copying triples from one graph to another."@en;
  skos:prefLabel "Copy"@en;
  rdfs:isDefinedBy sparql:.

sparql:InsertData
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:InsertData;
  skos:definition "Represents an INSERT DATA operation in SPARQL, inserting triples directly into the dataset."@en;
  skos:prefLabel "Insert Data"@en;
  rdfs:isDefinedBy sparql:.

sparql:DeleteData
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:DeleteData;
  skos:definition "Represents a DELETE DATA operation in SPARQL, removing triples directly from the dataset."@en;
  skos:prefLabel "Delete Data"@en;
  rdfs:isDefinedBy sparql:.

sparql:DeleteWhere
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:DeleteWhere;
  skos:definition "Represents a DELETE WHERE operation in SPARQL, removing triples based on a pattern."@en;
  skos:prefLabel "Delete Where"@en;
  rdfs:isDefinedBy sparql:.

sparql:Modify
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:Modify;
  skos:definition "Represents a MODIFY operation in SPARQL, applying a set of INSERT and DELETE patterns to the dataset."@en;
  skos:prefLabel "Modify"@en;
  rdfs:isDefinedBy sparql:.

sparql:DeleteClause
  a owl:Class;
  dct:conformsTo section:DeleteClause;
  skos:definition "Represents a DELETE clause in SPARQL, specifying triples to be deleted."@en;
  skos:prefLabel "Delete Clause"@en;
  rdfs:isDefinedBy sparql:.

sparql:InsertClause
  a owl:Class;
  rdfs:subClassOf sparql:NonTerminalNode;
  dct:conformsTo section:InsertClause;
  skos:definition "Represents an INSERT clause in SPARQL, specifying triples to be inserted."@en;
  skos:prefLabel "Insert Clause"@en;
  rdfs:isDefinedBy sparql:.

shp:NonTerminalNode
    a sh:NodeShape;
    sh:rule rule:NonTerminalNode;
    sh:target target:NonTerminalNode;
    skos:prefLabel 'Non-terminal node shape'@en;
    rdfs:isDefinedBy sparql:.

target:NonTerminalNode
    a sh:SPARQLTarget;
    rdfs:comment 'Select non-terminal nodes in a SPARQL Abstract Syntax Tree that do not have a SPARQL fragment yet, and whose child nodes all have a SPARQL fragment already.'@en;
    sh:prefixes sparql:;
    sh:select '''
select $this {

  # Select all non-terminal nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:NonTerminalNode.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
  # ...but whose child nodes all have an SPARQL fragment (both non-terminal child nodes and terminal child nodes)
  minus {
    $this ?member ?child.
    filter not exists { ?child sparql:fragment []. }
    ?child a/rdfs:subClassOf* sparql:Node.
  }
}''';
    rdfs:isDefinedBy sparql:.

  rule:NonTerminalNode
    a sh:SPARQLRule;
    rdfs:comment 'Create the SPARQL fragment for a non-terminal node in a SPARQL query.'@en;
    skos:prefLabel 'SPARQL non-terminal node serialization algorithm'@en;
    sh:prefixes sparql:;
    sh:construct '''
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
 
  # Get the SPARQL fragments of child nodes, if there are any. Note how each child node fragment is separated by a space.
  {
    select $this (group_concat(str(?fragment);separator=' ') as ?fragments) {
      {
        select $this ?member ?fragment {
          $this ?member ?node.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
          ?node sparql:fragment ?fragment.
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
      }
    } group by $this
  }
  # Build the SPARQL fragment for this node, by combining everything retrieved above.
  bind(strdt(concat(if(?fragments='','',?fragments)),xsd:string) as ?fragment)
  
}''';
    rdfs:isDefinedBy sparql:.

shp:Keyword
    a sh:NodeShape;
    sh:rule rule:Keyword;
    sh:target target:Keyword;
    skos:prefLabel 'Keyword shape'@en;
    rdfs:isDefinedBy sparql:.    

target:Keyword
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes sparql:;
    sh:select '''
select $this {

  # Select all keyword nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:Keyword.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
}''';
    rdfs:isDefinedBy sparql:.

rule:Keyword
    a sh:SPARQLRule;
    rdfs:comment ''@en;
    skos:prefLabel ''@en;
    sh:prefixes sparql:;
    sh:construct '''
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
  
  $this a ?class.
  ?class sparql:syntax ?syntax.
  
  # Build the SPARQL fragment for the keyword.
  bind(strdt(?syntax,xsd:string) as ?fragment)
  
}''';
    rdfs:isDefinedBy sparql:.      

shp:Symbol
    a sh:NodeShape;
    sh:rule rule:Symbol;
    sh:target target:Symbol;
    skos:prefLabel 'Symbol shape'@en;
    rdfs:isDefinedBy sparql:.    

target:Symbol
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes sparql:;
    sh:select '''
select $this {

  # Select all symbol nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:Symbol.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
}''';
    rdfs:isDefinedBy sparql:.

rule:Symbol
    a sh:SPARQLRule;
    rdfs:comment ''@en;
    skos:prefLabel ''@en;
    sh:prefixes sparql:;
    sh:construct '''
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
  
  $this a ?class.
  ?class sparql:syntax ?syntax.
  
  # Build the SPARQL fragment for the symbol.
  bind(strdt(?syntax,xsd:string) as ?fragment)
  
}''';
    rdfs:isDefinedBy sparql:.      

shp:SymbolSequence
    a sh:NodeShape;
    sh:rule rule:SymbolSequence;
    sh:target target:SymbolSequence;
    skos:prefLabel 'Symbol sequence shape'@en;
    rdfs:isDefinedBy sparql:.    

target:SymbolSequence
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes sparql:;
    sh:select '''
select $this {

  # Select all symbol sequence nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:SymbolSequence.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
 # ...but whose child nodes all have an SPARQL fragment 
  minus {
    $this ?member ?child.
    filter not exists { ?child sparql:fragment []. }
    ?child a/rdfs:subClassOf* sparql:Node.
  }
}''';
    rdfs:isDefinedBy sparql:.

  rule:SymbolSequence
    a sh:SPARQLRule;
    rdfs:comment 'Create the SPARQL fragment for a symbol sequence in a SPARQL query.'@en;
    skos:prefLabel 'SPARQL symbol sequence serialization algorithm'@en;
    sh:prefixes sparql:;
    sh:construct '''
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
 
  # Get the SPARQL fragments of child nodes, if there are any. Note how the fragments of the child nodes are concatenated without space separator.
  {
    select $this (group_concat(str(?fragment);separator='') as ?fragments) {
      {
        select $this ?member ?fragment {
          $this ?member ?node.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
          ?node sparql:fragment ?fragment.
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
      }
    } group by $this
  }
  # Build the SPARQL fragment for this node, by combining everything retrieved above.
  bind(strdt(concat(if(?fragments='','',?fragments)),xsd:string) as ?fragment)
  
}''';
    rdfs:isDefinedBy sparql:.

shp:CharacterSequence
    a sh:NodeShape;
    sh:rule rule:CharacterSequence;
    sh:target target:CharacterSequence;
    skos:prefLabel 'CharacterSequence shape'@en;
    rdfs:isDefinedBy sparql:.    

target:CharacterSequence
    a sh:SPARQLTarget;
    rdfs:comment ''@en;
    sh:prefixes sparql:;
    sh:select '''
select $this {

  # Select all character sequence nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:CharacterSequence.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
}''';
    rdfs:isDefinedBy sparql:.

rule:CharacterSequence
    a sh:SPARQLRule;
    rdfs:comment ''@en;
    skos:prefLabel ''@en;
    sh:prefixes sparql:;
    sh:construct '''
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
  
  $this rdf:value ?fragment.
  
}''';
    rdfs:isDefinedBy sparql:.   