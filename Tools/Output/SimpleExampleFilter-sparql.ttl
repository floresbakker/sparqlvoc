@prefix dcm: <http://purl.org/dc/dcmitype/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix decl: <http://www.w3.org/ns/sparql#model/decl/> .
@prefix ex: <https://www.example.org/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rule: <http://www.w3.org/ns/sparql#model/rule/> .
@prefix section: <https://www.w3.org/TR/sparql11-query/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shp: <http://www.w3.org/ns/sparql#model/shp/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sparql: <http://www.w3.org/ns/sparql#model/def/> .
@prefix standard: <http://www.w3.org/ns/sparql#model/> .
@prefix status: <http://purl.org/adms/status/> .
@prefix target: <http://www.w3.org/ns/sparql#model/target/> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

sparql:ASC a owl:Class ;
    dct:conformsTo section:ASC ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the ASC keyword in a SPARQL query."@en ;
    skos:prefLabel "ASC keyword"@en ;
    sparql:syntax "ASC" .

sparql:Add a owl:Class ;
    dct:conformsTo section:Add ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an ADD operation in SPARQL, adding triples from one graph to another."@en ;
    skos:prefLabel "Add"@en .

sparql:Aggregate a owl:Class ;
    dct:conformsTo section:Aggregate ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an aggregate clause in SPARQL."@en ;
    skos:prefLabel "Aggregate clause"@en .

sparql:And a owl:Class ;
    dct:conformsTo section:And ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents the AND symbol in a SPARQL query."@en ;
    skos:prefLabel "AND symbol in a SPARQL query"@en ;
    sparql:syntax "&&" .

sparql:Anon a owl:Class ;
    dct:conformsTo section:Anon ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition ".."@en ;
    skos:prefLabel "Anon"@en .

sparql:ArgList a owl:Class ;
    dct:conformsTo section:ArgList ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an ArgList in SPARQL."@en ;
    skos:prefLabel "ArgList"@en .

sparql:As a owl:Class ;
    dct:conformsTo section:As ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the AS keyword in a SPARQL query."@en ;
    skos:prefLabel "AS keyword"@en ;
    sparql:syntax "AS" .

sparql:Ask a owl:Class ;
    dct:conformsTo section:Ask ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the ASK keyword in a SPARQL query."@en ;
    skos:prefLabel "ASK keyword"@en ;
    sparql:syntax "ASK" .

sparql:AskQuery a owl:Class ;
    dct:conformsTo section:AskQuery ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an ASK query in SPARQL, which returns a boolean result."@en ;
    skos:prefLabel "Ask Query"@en .

sparql:Bind a owl:Class ;
    dct:conformsTo section:Bind ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:TerminalNode ;
    skos:definition "Represents the BIND keyword in SPARQL."@en ;
    skos:prefLabel "Bind"@en ;
    sparql:syntax "BIND" .

sparql:BindClause a owl:Class ;
    dct:conformsTo section:BindClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a BIND clause in SPARQL, binding a value to a variable in the result set."@en ;
    skos:prefLabel "Bind clause"@en .

sparql:BlankNode a owl:Class ;
    dct:conformsTo section:BlankNode ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Blank Node"@en .

sparql:BlankNodeLabel a owl:Class ;
    dct:conformsTo section:BlankNodeLabel ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition ".."@en ;
    skos:prefLabel "Blank Node"@en .

sparql:BlankNodePropertyListPath a owl:Class ;
    dct:conformsTo section:BlankNodePropertyListPath ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Blank Node Property List Path"@en .

sparql:BooleanLiteral a owl:Class ;
    dct:conformsTo section:BooleanLiteral ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a Boolean Literal clause in SPARQL."@en ;
    skos:prefLabel "BooleanLiteral clause"@en .

sparql:BuiltInCall a owl:Class ;
    dct:conformsTo section:BuiltInCall ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a built in call clause in SPARQL."@en ;
    skos:prefLabel "BuiltInCall clause"@en .

sparql:By a owl:Class ;
    dct:conformsTo section:By ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the BY keyword in a SPARQL query."@en ;
    skos:prefLabel "BY keyword"@en ;
    sparql:syntax "BY" .

sparql:Caret a owl:Class ;
    dct:conformsTo section:Caret ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a caret in a SPARQL query."@en ;
    skos:prefLabel "Caret in a SPARQL query"@en ;
    sparql:syntax "^" .

sparql:Clear a owl:Class ;
    dct:conformsTo section:Clear ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a CLEAR operation in SPARQL, removing all data from a specified graph."@en ;
    skos:prefLabel "Clear"@en .

sparql:ClosedSquareBracket a owl:Class ;
    dct:conformsTo section:ClosedSquareBracket ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a closed square bracket in a SPARQL query."@en ;
    skos:prefLabel "Closed square bracket in a SPARQL query"@en ;
    sparql:syntax "]" .

sparql:CollectionPath a owl:Class ;
    dct:conformsTo section:CollectionPath ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Collection Path"@en .

sparql:Construct a owl:Class ;
    dct:conformsTo section:Construct ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the CONSTRUCT keyword in a SPARQL query."@en ;
    skos:prefLabel "CONSTRUCT keyword"@en ;
    sparql:syntax "CONSTRUCT" .

sparql:ConstructQuery a owl:Class ;
    dct:conformsTo section:ConstructQuery ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a CONSTRUCT query in SPARQL, which constructs new RDF triples."@en ;
    skos:prefLabel "Construct Query"@en .

sparql:Copy a owl:Class ;
    dct:conformsTo section:Copy ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a COPY operation in SPARQL, copying triples from one graph to another."@en ;
    skos:prefLabel "Copy"@en .

sparql:Create a owl:Class ;
    dct:conformsTo section:Create ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a CREATE operation in SPARQL, creating an empty graph in the dataset."@en ;
    skos:prefLabel "Create"@en .

sparql:DESC a owl:Class ;
    dct:conformsTo section:DESC ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the DESC keyword in a SPARQL query."@en ;
    skos:prefLabel "DESC keyword"@en ;
    sparql:syntax "DESC" .

sparql:DatasetClause a owl:Class ;
    dct:conformsTo section:DatasetClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a dataset clause in SPARQL, specifying a graph from which to query."@en ;
    skos:prefLabel "Dataset Clause"@en .

sparql:Decimal a owl:Class ;
    dct:conformsTo section:Decimal ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Decimal clause in SPARQL."@en ;
    skos:prefLabel "Decimal clause"@en .

sparql:Decimal_Negative a owl:Class ;
    dct:conformsTo section:Decimal_Negative ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Decimal Negative clause in SPARQL."@en ;
    skos:prefLabel "Decimal Negative clause"@en .

sparql:Decimal_Positive a owl:Class ;
    dct:conformsTo section:Decimal_Positive ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Decimal Positive clause in SPARQL."@en ;
    skos:prefLabel "Decimal Positive clause"@en .

sparql:DefaultGraphClause a owl:Class ;
    dct:conformsTo section:DefaultGraphClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a default graph clause in SPARQL, specifying the source selector."@en ;
    skos:prefLabel "Default Graph Clause"@en .

sparql:DeleteClause a owl:Class ;
    dct:conformsTo section:DeleteClause ;
    rdfs:isDefinedBy sparql: ;
    skos:definition "Represents a DELETE clause in SPARQL, specifying triples to be deleted."@en ;
    skos:prefLabel "Delete Clause"@en .

sparql:DeleteData a owl:Class ;
    dct:conformsTo section:DeleteData ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a DELETE DATA operation in SPARQL, removing triples directly from the dataset."@en ;
    skos:prefLabel "Delete Data"@en .

sparql:DeleteWhere a owl:Class ;
    dct:conformsTo section:DeleteWhere ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a DELETE WHERE operation in SPARQL, removing triples based on a pattern."@en ;
    skos:prefLabel "Delete Where"@en .

sparql:Describe a owl:Class ;
    dct:conformsTo section:Describe ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the DESCRIBE keyword in a SPARQL query."@en ;
    skos:prefLabel "DESCRIBE keyword"@en ;
    sparql:syntax "DESCRIBE" .

sparql:DescribeQuery a owl:Class ;
    dct:conformsTo section:DescribeQuery ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a DESCRIBE query in SPARQL, returning descriptions of resources."@en ;
    skos:prefLabel "Describe Query"@en .

sparql:Distinct a owl:Class ;
    dct:conformsTo section:Distinct ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the DISTINCT keyword in SPARQL."@en ;
    skos:prefLabel "DISTINCT keyword"@en ;
    sparql:syntax "DISTINCT" .

sparql:DivisionSign a owl:Class ;
    dct:conformsTo section:DivisionSign ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a division sign in a SPARQL query."@en ;
    skos:prefLabel "Division sign in a SPARQL query"@en ;
    sparql:syntax "/" .

sparql:Double a owl:Class ;
    dct:conformsTo section:Double ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Double clause in SPARQL."@en ;
    skos:prefLabel "Double clause"@en .

sparql:Double_Negative a owl:Class ;
    dct:conformsTo section:Double_Negative ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Double Negative clause in SPARQL."@en ;
    skos:prefLabel "Double Negative clause"@en .

sparql:Double_Positive a owl:Class ;
    dct:conformsTo section:Double_Positive ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Double Positive clause in SPARQL."@en ;
    skos:prefLabel "Double Positive clause"@en .

sparql:Drop a owl:Class ;
    dct:conformsTo section:Drop ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a DROP operation in SPARQL, removing a graph from the dataset."@en ;
    skos:prefLabel "Drop"@en .

sparql:ExclamationMark a owl:Class ;
    dct:conformsTo section:ExclamationMark ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents an exclamation mark in a SPARQL query."@en ;
    skos:prefLabel "Exclamation mark in a SPARQL query"@en ;
    sparql:syntax "!" .

sparql:ExistsFunc a owl:Class ;
    dct:conformsTo section:ExistsFunc ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a ExistsFunc clause in SPARQL."@en ;
    skos:prefLabel "ExistsFunc clause"@en .

sparql:Exponent a owl:Class ;
    dct:conformsTo section:Exponent ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:CharacterSequence ;
    skos:definition "Represents a Exponent clause in SPARQL."@en ;
    skos:prefLabel "Exponent clause"@en .

sparql:ExpressionList a owl:Class ;
    dct:conformsTo section:ExpressionList ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an expression list clause in SPARQL."@en ;
    skos:prefLabel "ExpressionList clause"@en .

sparql:From a owl:Class ;
    dct:conformsTo section:From ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the FROM keyword in a SPARQL query."@en ;
    skos:prefLabel "FROM keyword"@en ;
    sparql:syntax "FROM" .

sparql:Graph a owl:Class ;
    dct:conformsTo section:Graph ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the GRAPH keyword in a SPARQL query."@en ;
    skos:prefLabel "GRAPH keyword"@en ;
    sparql:syntax "GRAPH" .

sparql:GraphGraphPattern a owl:Class ;
    dct:conformsTo section:GraphGraphPattern ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a GRAPH graph pattern in SPARQL, specifying a named graph to match."@en ;
    skos:prefLabel "Graph Graph Pattern"@en .

sparql:GraphTerm a owl:Class ;
    dct:conformsTo section:VarOrTerm ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Graph term"@en .

sparql:Group a owl:Class ;
    dct:conformsTo section:Group ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the GROUP keyword in a SPARQL query."@en ;
    skos:prefLabel "GROUP keyword"@en ;
    sparql:syntax "GROUP" .

sparql:GroupClause a owl:Class ;
    dct:conformsTo section:GroupClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a GROUP BY clause in SPARQL, grouping results by specified expressions."@en ;
    skos:prefLabel "Group Clause"@en .

sparql:Having a owl:Class ;
    dct:conformsTo section:Having ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the HAVING keyword in a SPARQL query."@en ;
    skos:prefLabel "HAVING keyword"@en ;
    sparql:syntax "HAVING" .

sparql:HavingClause a owl:Class ;
    dct:conformsTo section:HavingClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a HAVING clause in SPARQL, applying constraints on the result set after grouping."@en ;
    skos:prefLabel "Having Clause"@en .

sparql:IRI a owl:Class ;
    dct:conformsTo section:IRI ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an IRI in SPARQL."@en ;
    skos:prefLabel "IRI"@en .

sparql:InlineData a owl:Class ;
    dct:conformsTo section:InlineData ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an inline data block in SPARQL, providing explicit values for variables in the query."@en ;
    skos:prefLabel "Inline Data"@en .

sparql:InsertClause a owl:Class ;
    dct:conformsTo section:InsertClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an INSERT clause in SPARQL, specifying triples to be inserted."@en ;
    skos:prefLabel "Insert Clause"@en .

sparql:InsertData a owl:Class ;
    dct:conformsTo section:InsertData ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an INSERT DATA operation in SPARQL, inserting triples directly into the dataset."@en ;
    skos:prefLabel "Insert Data"@en .

sparql:Integer a owl:Class ;
    dct:conformsTo section:Integer ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:CharacterSequence ;
    skos:definition "Represents a Integer clause in SPARQL."@en ;
    skos:prefLabel "Integer clause"@en .

sparql:Integer_Negative a owl:Class ;
    dct:conformsTo section:Integer_Negative ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Integer Negative clause in SPARQL."@en ;
    skos:prefLabel "Integer Negative clause"@en .

sparql:Integer_Positive a owl:Class ;
    dct:conformsTo section:Integer_Positive ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Integer Positive clause in SPARQL."@en ;
    skos:prefLabel "Integer Positive clause"@en .

sparql:IriOrFunction a owl:Class ;
    dct:conformsTo section:IriOrFunction ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an IRI or Function clause in SPARQL."@en ;
    skos:prefLabel "IriOrFunction clause"@en .

sparql:Langtag a owl:Class ;
    dct:conformsTo section:Langtag ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a langtag clause in SPARQL."@en ;
    skos:prefLabel "Langtag clause"@en .

sparql:Limit a owl:Class ;
    dct:conformsTo section:Limit ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the LIMIT keyword in a SPARQL query."@en ;
    skos:prefLabel "LIMIT keyword"@en ;
    sparql:syntax "LIMIT" .

sparql:LimitClause a owl:Class ;
    dct:conformsTo section:LimitClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a LIMIT clause in SPARQL, specifying the maximum number of solutions to return."@en ;
    skos:prefLabel "Limit Clause"@en .

sparql:Load a owl:Class ;
    dct:conformsTo section:Load ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a LOAD operation in SPARQL, loading RDF data into a graph from a source."@en ;
    skos:prefLabel "Load"@en .

sparql:Minus a owl:Class ;
    dct:conformsTo section:Minus ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the MINUS keyword in a SPARQL query."@en ;
    skos:prefLabel "MINUS keyword"@en ;
    sparql:syntax "MINUS" .

sparql:MinusGraphPattern a owl:Class ;
    dct:conformsTo section:MinusGraphPattern ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a MINUS graph pattern in SPARQL, which removes certain solutions from the result set."@en ;
    skos:prefLabel "Minus Graph Pattern"@en .

sparql:MinusSign a owl:Class ;
    dct:conformsTo section:MinusSign ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a minus sign in a SPARQL query."@en ;
    skos:prefLabel "Minus sign in a SPARQL query"@en ;
    sparql:syntax "-" .

sparql:Modify a owl:Class ;
    dct:conformsTo section:Modify ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a MODIFY operation in SPARQL, applying a set of INSERT and DELETE patterns to the dataset."@en ;
    skos:prefLabel "Modify"@en .

sparql:Move a owl:Class ;
    dct:conformsTo section:Move ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a MOVE operation in SPARQL, moving triples from one graph to another."@en ;
    skos:prefLabel "Move"@en .

sparql:MultiplicationSign a owl:Class ;
    dct:conformsTo section:MultiplicationSign ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a multiplication sign in a SPARQL query."@en ;
    skos:prefLabel "Multiplication sign in a SPARQL query"@en ;
    sparql:syntax "*" .

sparql:Named a owl:Class ;
    dct:conformsTo section:Named ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the Named keyword in a SPARQL query."@en ;
    skos:prefLabel "NAMED keyword"@en ;
    sparql:syntax "NAMED" .

sparql:NamedGraphClause a owl:Class ;
    dct:conformsTo section:NamedGraphClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a named graph clause in SPARQL, specifying the source selector."@en ;
    skos:prefLabel "Named Graph Clause"@en .

sparql:Nil a owl:Class ;
    dct:conformsTo section:Nil ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a Nil in SPARQL."@en ;
    skos:prefLabel "Nil"@en .

sparql:NotEqual a owl:Class ;
    dct:conformsTo section:NotEqual ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a not-equal symbol in a SPARQL query."@en ;
    skos:prefLabel "Equal symbol in a SPARQL query"@en ;
    sparql:syntax "!=" .

sparql:NotExistsFunc a owl:Class ;
    dct:conformsTo section:NotExistsFunc ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a NotExistsFunc clause in SPARQL."@en ;
    skos:prefLabel "NotExistsFunc clause"@en .

sparql:NumericLiteral a owl:Class ;
    dct:conformsTo section:NumericLiteral ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a numeric literal clause in SPARQL."@en ;
    skos:prefLabel "NumericLiteral clause"@en .

sparql:NumericLiteralNegative a owl:Class ;
    dct:conformsTo section:NumericLiteralNegative ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a numeric literal negative in SPARQL."@en ;
    skos:prefLabel "NumericLiteralNegative clause"@en .

sparql:NumericLiteralPositive a owl:Class ;
    dct:conformsTo section:NumericLiteralPositive ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a numeric literal positive in SPARQL."@en ;
    skos:prefLabel "NumericLiteralPositive clause"@en .

sparql:NumericLiteralUnsigned a owl:Class ;
    dct:conformsTo section:NumericLiteralUnsigned ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a numeric literal unsigned in SPARQL."@en ;
    skos:prefLabel "NumericLiteralUnsigned clause"@en .

sparql:Offset a owl:Class ;
    dct:conformsTo section:Offset ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the OFFSET keyword in a SPARQL query."@en ;
    skos:prefLabel "OFFSET keyword"@en ;
    sparql:syntax "OFFSET" .

sparql:OffsetClause a owl:Class ;
    dct:conformsTo section:OffsetClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an OFFSET clause in SPARQL, specifying the number of solutions to skip in the result set."@en ;
    skos:prefLabel "Offset Clause"@en .

sparql:OpenSquareBracket a owl:Class ;
    dct:conformsTo section:OpenSquareBracket ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents an open square bracket in a SPARQL query."@en ;
    skos:prefLabel "Open square bracket in a SPARQL query"@en ;
    sparql:syntax "[" .

sparql:Optional a owl:Class ;
    dct:conformsTo section:Optional ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the OPTIONAL keyword in a SPARQL query."@en ;
    skos:prefLabel "OPTIONAL keyword"@en ;
    sparql:syntax "OPTIONAL" .

sparql:OptionalGraphPattern a owl:Class ;
    dct:conformsTo section:OptionalGraphPattern ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an OPTIONAL graph pattern in SPARQL, which extends the result set with additional values if a pattern exists."@en ;
    skos:prefLabel "Optional Graph Pattern"@en .

sparql:Or a owl:Class ;
    dct:conformsTo section:Or ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents the OR symbol in a SPARQL query."@en ;
    skos:prefLabel "OR symbol in a SPARQL query"@en ;
    sparql:syntax "||" .

sparql:Order a owl:Class ;
    dct:conformsTo section:Order ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the ORDER keyword in a SPARQL query."@en ;
    skos:prefLabel "ORDER keyword"@en ;
    sparql:syntax "ORDER" .

sparql:OrderClause a owl:Class ;
    dct:conformsTo section:OrderClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an ORDER BY clause in SPARQL, specifying the order of solutions in the result set."@en ;
    skos:prefLabel "Order Clause"@en .

sparql:OrderCondition a owl:Class ;
    dct:conformsTo section:OrderCondition ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a condition used in an ORDER BY clause to determine the order of the result set."@en ;
    skos:prefLabel "Order Condition"@en .

sparql:PNAME_LN a owl:Class ;
    dct:conformsTo section:PNAME_LN ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents an PNAME_LN in a SPARQL prefix declaration."@en ;
    skos:prefLabel "PNAME_LN"@en .

sparql:PN_LOCAL a owl:Class ;
    dct:conformsTo section:PN_LOCAL ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents an PN_LOCAL in SPARQL."@en ;
    skos:prefLabel "PN_LOCAL"@en .

sparql:Period a owl:Class ;
    dct:conformsTo section:Period ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a period in a SPARQL query."@en ;
    skos:prefLabel "Period in a SPARQL query"@en ;
    sparql:syntax "." .

sparql:PlusSign a owl:Class ;
    dct:conformsTo section:PlusSign ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a plus sign in a SPARQL query."@en ;
    skos:prefLabel "Plus sign in a SPARQL query"@en ;
    sparql:syntax "+" .

sparql:PrefixedName a owl:Class ;
    dct:conformsTo section:PrefixedName ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a prefixed name in SPARQL."@en ;
    skos:prefLabel "Prefixed name"@en .

sparql:Query a owl:Class ;
    dct:conformsTo section:Query ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a SPARQL query with various forms such as Select, Construct, Describe, and Ask."@en ;
    skos:prefLabel "Query"@en .

sparql:RDFLiteral a owl:Class ;
    dct:conformsTo section:RDFLiteral ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a RDF literal clause in SPARQL."@en ;
    skos:prefLabel "RDFLiteral clause"@en .

sparql:Reduced a owl:Class ;
    dct:conformsTo section:Reduced ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the REDUCED keyword in SPARQL."@en ;
    skos:prefLabel "REDUCED keyword"@en ;
    sparql:syntax "REDUCED" .

sparql:RegexExpression a owl:Class ;
    dct:conformsTo section:RegexExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a RegexExpression clause in SPARQL."@en ;
    skos:prefLabel "RegexExpression clause"@en .

sparql:STRING_LITERAL1 a owl:Class ;
    dct:conformsTo section:STRING_LITERAL1 ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a langtag clause in SPARQL."@en ;
    skos:prefLabel "STRING_LITERAL1 clause"@en .

sparql:STRING_LITERAL2 a owl:Class ;
    dct:conformsTo section:STRING_LITERAL2 ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a langtag clause in SPARQL."@en ;
    skos:prefLabel "STRING_LITERAL2 clause"@en .

sparql:STRING_LITERAL_LONG1 a owl:Class ;
    dct:conformsTo section:STRING_LITERAL_LONG1 ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a STRING_LITERAL_LONG1 clause in SPARQL."@en ;
    skos:prefLabel "STRING_LITERAL_LONG1 clause"@en .

sparql:STRING_LITERAL_LONG2 a owl:Class ;
    dct:conformsTo section:STRING_LITERAL_LONG2 ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a STRING_LITERAL_LONG2 clause in SPARQL."@en ;
    skos:prefLabel "STRING_LITERAL_LONG2 clause"@en .

sparql:SemiColon a owl:Class ;
    dct:conformsTo section:SemiColon ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a semicolon in a SPARQL query."@en ;
    skos:prefLabel "Semicolon in a SPARQL query"@en ;
    sparql:syntax ";" .

sparql:Service a owl:Class ;
    dct:conformsTo section:Service ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the SERVICE keyword in a SPARQL query."@en ;
    skos:prefLabel "SERVICE keyword"@en ;
    sparql:syntax "SERVICE" .

sparql:ServiceGraphPattern a owl:Class ;
    dct:conformsTo section:ServiceGraphPattern ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a SERVICE graph pattern in SPARQL, specifying a remote SPARQL endpoint to query."@en ;
    skos:prefLabel "Service Graph Pattern"@en .

sparql:SolutionModifier a owl:Class ;
    dct:conformsTo section:SolutionModifier ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a solution modifier in SPARQL, modifying the result set (e.g., LIMIT, OFFSET)."@en ;
    skos:prefLabel "Solution Modifier"@en .

sparql:SourceSelector a owl:Class ;
    dct:conformsTo section:SourceSelector ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a source selector in SPARQL, identifying a graph using an IRI."@en ;
    skos:prefLabel "Source Selector"@en .

sparql:StrReplaceExpression a owl:Class ;
    dct:conformsTo section:StrReplaceExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a StrReplaceExpression clause in SPARQL."@en ;
    skos:prefLabel "StrReplaceExpression clause"@en .

sparql:String a owl:Class ;
    dct:conformsTo section:String ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a string clause in SPARQL."@en ;
    skos:prefLabel "String clause"@en .

sparql:SubSelect a owl:Class ;
    dct:conformsTo section:SubSelect ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a sub-select query in SPARQL with select, where, and solution modifier clauses."@en ;
    skos:prefLabel "Sub Select"@en .

sparql:SubstringExpression a owl:Class ;
    dct:conformsTo section:SubstringExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a substring expression clause in SPARQL."@en ;
    skos:prefLabel "SubstringExpression clause"@en .

sparql:TriplesNodePath a owl:Class ;
    dct:conformsTo section:TriplesNodePath ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Triples Node Path"@en .

sparql:TriplesTemplate a owl:Class ;
    dct:conformsTo section:TriplesTemplate ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a triple template in SPARQL, used in CONSTRUCT queries to create RDF triples."@en ;
    skos:prefLabel "Triples Template"@en .

sparql:Update a owl:Class ;
    dct:conformsTo section:Update ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a SPARQL update request, modifying data in the RDF store."@en ;
    skos:prefLabel "Update"@en .

sparql:Update1 a owl:Class ;
    dct:conformsTo section:Update1 ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a single update operation within an update request in SPARQL."@en ;
    skos:prefLabel "Update1"@en .

sparql:UpdateUnit a owl:Class ;
    dct:conformsTo section:UpdateUnit ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents the unit of an update in SPARQL."@en ;
    skos:prefLabel "Update Unit"@en .

sparql:Values a owl:Class ;
    dct:conformsTo section:Values ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:TerminalNode ;
    skos:definition "Represents the VALUES keyword in SPARQL."@en ;
    skos:prefLabel "Values"@en ;
    sparql:syntax "VALUES" .

sparql:ValuesClause a owl:Class ;
    dct:conformsTo section:ValuesClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a VALUES clause in SPARQL, providing explicit values for variables within the query."@en ;
    skos:prefLabel "Values Clause"@en .

sparql:Variable2 a owl:Class ;
    dct:conformsTo section:Variable ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a variable in a select clause in SPARQL with the dollar notation."@en ;
    skos:prefLabel "Variable in select clause with dollar symbol"@en ;
    sparql:syntax "$" .

shp:CharacterSequence a sh:NodeShape ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "CharacterSequence shape"@en ;
    sh:rule rule:CharacterSequence ;
    sh:target target:CharacterSequence .

shp:Keyword a sh:NodeShape ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "Keyword shape"@en ;
    sh:rule rule:Keyword ;
    sh:target target:Keyword .

shp:SerializableNode a sh:NodeShape ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "serializable node shape"@en ;
    sh:rule rule:SerializableNode ;
    sh:target target:SerializableNode .

shp:Symbol a sh:NodeShape ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "Symbol shape"@en ;
    sh:rule rule:Symbol ;
    sh:target target:Symbol .

shp:SymbolSequence a sh:NodeShape ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "Symbol sequence shape"@en ;
    sh:rule rule:SymbolSequence ;
    sh:target target:SymbolSequence .

ex:exampleQueryTree a sparql:AbstractSyntaxTree ;
    rdf:_1 ex:exampleQuery .

decl:prov sh:namespace "http://www.w3.org/ns/prov#"^^xsd:anyURI ;
    sh:prefix "prov" .

decl:rdf sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
    sh:prefix "rdf" .

decl:rdfs sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
    sh:prefix "rdfs" .

decl:sparql sh:namespace "http://www.w3.org/ns/sparql#model/def/"^^xsd:anyURI ;
    sh:prefix "sparql" .

decl:xsd sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI ;
    sh:prefix "xsd" .

sparql:AbstractSyntaxTree a owl:Class ;
    dct:conformsTo section:Tree ;
    rdfs:isDefinedBy sparql: ;
    skos:definition "An abstract syntax tree is an object that represents a SPARQL query unit. A tree consists of connected nodes."@en ;
    skos:prefLabel "Abstract Syntax Tree"@en .

sparql:Base a owl:Class ;
    dct:conformsTo section:Base ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the BASE keyword in a SPARQL query."@en ;
    skos:prefLabel "BASE keyword"@en ;
    sparql:syntax "BASE" .

sparql:BaseDecl a owl:Class ;
    dct:conformsTo section:BaseDecl ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a BASE declaration with an IRI in SPARQL."@en ;
    skos:prefLabel "Base Declaration"@en .

sparql:BrackettedExpression a owl:Class ;
    dct:conformsTo section:BrackettedExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a bracketted expression clause in SPARQL."@en ;
    skos:prefLabel "BrackettedExpression clause"@en .

sparql:ClosedCurlyBracket a owl:Class ;
    dct:conformsTo section:ClosedCurlyBracket ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a closed curly bracket in a SPARQL query."@en ;
    skos:prefLabel "Closed curly bracket in a SPARQL query"@en ;
    sparql:syntax "}" .

sparql:ClosedParenthesis a owl:Class ;
    dct:conformsTo section:ClosedParenthesis ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a closed parenthesis in a SPARQL query."@en ;
    skos:prefLabel "Closed parenthesis in a SPARQL query"@en ;
    sparql:syntax ")" .

sparql:Colon a owl:Class ;
    dct:conformsTo section:Colon ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a colon in a SPARQL query."@en ;
    skos:prefLabel "Colon in a SPARQL query"@en ;
    sparql:syntax ":" .

sparql:ConditionalAndExpression a owl:Class ;
    dct:conformsTo section:ConditionalAndExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a conditional and expression clause in SPARQL."@en ;
    skos:prefLabel "ConditionalOrExpression clause"@en .

sparql:ConditionalOrExpression a owl:Class ;
    dct:conformsTo section:ConditionalOrExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a conditional or expression clause in SPARQL."@en ;
    skos:prefLabel "ConditionalOrExpression clause"@en .

sparql:Constraint a owl:Class ;
    dct:conformsTo section:Constraint ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a constraint clause in SPARQL."@en ;
    skos:prefLabel "Constraint clause"@en .

sparql:Equal a owl:Class ;
    dct:conformsTo section:Equal ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents an equal symbol in a SPARQL query."@en ;
    skos:prefLabel "Equal symbol in a SPARQL query"@en ;
    sparql:syntax "=" .

sparql:Expression a owl:Class ;
    dct:conformsTo section:Expression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents conditions used in filters, comparisons, or mathematical expressions."@en ;
    skos:prefLabel "Expression"@en .

sparql:Filter a owl:Class ;
    dct:conformsTo section:Filter ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the FILTER keyword in a SPARQL query."@en ;
    skos:prefLabel "FILTER keyword"@en ;
    sparql:syntax "FILTER" .

sparql:FilterClause a owl:Class ;
    dct:conformsTo section:FilterClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a FILTER clause in SPARQL, applying constraints to the result set based on a boolean condition."@en ;
    skos:prefLabel "Filter clause"@en .

sparql:GraphNodePath a owl:Class ;
    dct:conformsTo section:GraphNodePath ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Graph Node Path"@en .

sparql:GraphPatternNotTriples a owl:Class ;
    dct:conformsTo section:GraphPatternNotTriples ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents graph patterns in SPARQL that are not simple triple patterns, such as optional and union patterns."@en ;
    skos:prefLabel "Graph Pattern Not Triples"@en .

sparql:GreaterThan a owl:Class ;
    dct:conformsTo section:GreaterThan ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a greater than symbol in a SPARQL query."@en ;
    skos:prefLabel "Greater than symbol in a SPARQL query"@en ;
    sparql:syntax ">" .

sparql:GroupGraphPattern a owl:Class ;
    dct:conformsTo section:GroupGraphPattern ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a group graph pattern in SPARQL, containing a set of graph patterns that must all match."@en ;
    skos:prefLabel "Group Graph Pattern"@en .

sparql:GroupGraphPatternSub a owl:Class ;
    dct:conformsTo section:GroupGraphPatternSub ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a group graph pattern sub in SPARQL, containing a set of graph patterns that must all match."@en ;
    skos:prefLabel "Group Graph Pattern Sub"@en .

sparql:LessThan a owl:Class ;
    dct:conformsTo section:LessThan ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a less than symbol in a SPARQL query."@en ;
    skos:prefLabel "Less than symbol in a SPARQL query"@en ;
    sparql:syntax "<" .

sparql:ObjectListPath a owl:Class ;
    dct:conformsTo section:ObjectListPath ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Object List Path"@en .

sparql:ObjectPath a owl:Class ;
    dct:conformsTo section:ObjectPath ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Object Path"@en .

sparql:OpenCurlyBracket a owl:Class ;
    dct:conformsTo section:OpenCurlyBracket ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents an open curly bracket in a SPARQL query."@en ;
    skos:prefLabel "Open curly bracket in a SPARQL query"@en ;
    sparql:syntax "{" .

sparql:OpenParenthesis a owl:Class ;
    dct:conformsTo section:OpenParenthesis ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents an open parenthises in a SPARQL query."@en ;
    skos:prefLabel "Open parenthesis in a SPARQL query"@en ;
    sparql:syntax "(" .

sparql:PNAME_NS a owl:Class ;
    dct:conformsTo section:PNAME_NS ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents an PNAME_NS in a SPARQL prefix declaration."@en ;
    skos:prefLabel "PNAME_NS"@en .

sparql:PN_PREFIX a owl:Class ;
    dct:conformsTo section:PN_PREFIX ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:CharacterSequence ;
    skos:definition "Represents an PN_PREFIX in a SPARQL prefix declaration."@en ;
    skos:prefLabel "PN_PREFIX"@en .

sparql:Prefix a owl:Class ;
    dct:conformsTo section:Prefix ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the PREFIX keyword in a SPARQL query."@en ;
    skos:prefLabel "PREFIX keyword"@en ;
    sparql:syntax "PREFIX" .

sparql:PrefixDecl a owl:Class ;
    dct:conformsTo section:PrefixDecl ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a PREFIX declaration with a namespace prefix and IRI in SPARQL."@en ;
    skos:prefLabel "Prefix Declaration"@en .

sparql:Prologue a owl:Class ;
    dct:conformsTo section:Prologue ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents the prologue of a SPARQL query, which includes base and prefix declarations."@en ;
    skos:prefLabel "Prologue"@en .

sparql:PropertyListPathNotEmpty a owl:Class ;
    dct:conformsTo section:PropertyListPathNotEmpty ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Property List Path Not Empty"@en .

sparql:QueryUnit a owl:Class ;
    dct:conformsTo section:QueryUnit ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents the unit of a query in SPARQL. It is the root node in the SPARQL abstract syntax tree."@en ;
    skos:prefLabel "Query Unit"@en .

sparql:QuestionMark a owl:Class ;
    dct:conformsTo section:QuestionMark ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a question mark in a SPARQL query."@en ;
    skos:prefLabel "Question mark in a SPARQL query"@en ;
    sparql:syntax "?" .

sparql:RelationalExpression a owl:Class ;
    dct:conformsTo section:RelationalExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a relational expression clause in SPARQL."@en ;
    skos:prefLabel "RelationalExpression clause"@en .

sparql:Select a owl:Class ;
    dct:conformsTo section:Select ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents the SELECT keyword in SPARQL."@en ;
    skos:prefLabel "SELECT keyword"@en ;
    sparql:syntax "SELECT" .

sparql:SelectClause a owl:Class ;
    dct:conformsTo section:SelectClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a SELECT clause in SPARQL, specifying variables or expressions."@en ;
    skos:prefLabel "Select Clause"@en .

sparql:SelectQuery a owl:Class ;
    dct:conformsTo section:SelectQuery ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a SELECT query in SPARQL with optional DISTINCT/REDUCED and WHERE clause."@en ;
    skos:prefLabel "Select Query"@en .

sparql:TriplesBlock a owl:Class ;
    dct:conformsTo section:TriplesBlock ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a triple block in SPARQL."@en ;
    skos:prefLabel "Triples Block"@en .

sparql:TriplesSameSubjectPath a owl:Class ;
    dct:conformsTo section:TriplesSameSubjectPath ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Triples Same Subject Path"@en .

sparql:ValueLogical a owl:Class ;
    dct:conformsTo section:ValueLogical ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a value logical clause in SPARQL."@en ;
    skos:prefLabel "ValueLogical clause"@en .

sparql:VerbSimple a owl:Class ;
    dct:conformsTo section:VerbSimple ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Verb Simple"@en .

sparql:Where a owl:Class ;
    dct:conformsTo section:Where ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Keyword ;
    skos:definition "Represents a WHERE keyword in SPARQL."@en ;
    skos:prefLabel "WHERE keyword"@en ;
    sparql:syntax "WHERE" .

sparql:WhereClause a owl:Class ;
    dct:conformsTo section:WhereClause ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a WHERE clause in SPARQL, containing graph patterns to match."@en ;
    skos:prefLabel "Where Clause"@en .

sparql:Wildcard a owl:Class ;
    dct:conformsTo section:Wildcard ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Symbol ;
    skos:definition "Represents a wildcard in a select clause in SPARQL."@en ;
    skos:prefLabel "Wildcard in select clause"@en ;
    sparql:syntax "*" .

rule:CharacterSequence a sh:SPARQLRule ;
    rdfs:comment ""@en ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel ""@en ;
    sh:construct """
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
  
  $this rdf:value ?fragment.
  
}""" ;
    sh:prefixes sparql: .

rule:Keyword a sh:SPARQLRule ;
    rdfs:comment ""@en ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel ""@en ;
    sh:construct """
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
  
  $this a ?class.
  ?class sparql:syntax ?syntax.
  
  # Build the SPARQL fragment for the keyword.
  bind(strdt(?syntax,xsd:string) as ?fragment)
  
}""" ;
    sh:prefixes sparql: .

rule:SerializableNode a sh:SPARQLRule ;
    rdfs:comment "Create the SPARQL fragment for a node in a SPARQL query."@en ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "SPARQL serialization algorithm"@en ;
    sh:construct """
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
 
  # Get the SPARQL fragments of child nodes, if there are any. Note how each child node fragment is separated by a space.
  {
    select $this (group_concat(str(?fragment);separator=' ') as ?fragments) {
      {
        select $this ?member ?fragment {
          $this ?member ?node.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
          ?node sparql:fragment ?fragment.
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
      }
    } group by $this
  }
  # Build the SPARQL fragment for this node, by combining everything retrieved above.
  bind(strdt(concat(if(?fragments='','',?fragments)),xsd:string) as ?fragment)
  
}""" ;
    sh:prefixes sparql: .

rule:Symbol a sh:SPARQLRule ;
    rdfs:comment ""@en ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel ""@en ;
    sh:construct """
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
  
  $this a ?class.
  ?class sparql:syntax ?syntax.
  
  # Build the SPARQL fragment for the symbol.
  bind(strdt(?syntax,xsd:string) as ?fragment)
  
}""" ;
    sh:prefixes sparql: .

rule:SymbolSequence a sh:SPARQLRule ;
    rdfs:comment "Create the SPARQL fragment for a symbol sequence in a SPARQL query."@en ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "SPARQL symbol sequence serialization algorithm"@en ;
    sh:construct """
construct {

  # Assert the new SPARQL fragment for this SPARQL node
  $this sparql:fragment ?fragment.
  
} where {
 
  # Get the SPARQL fragments of child nodes, if there are any. Note how the fragments of the child nodes are concatenated without space separator.
  {
    select $this (group_concat(str(?fragment);separator='') as ?fragments) {
      {
        select $this ?member ?fragment {
          $this ?member ?node.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
          ?node sparql:fragment ?fragment.
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
      }
    } group by $this
  }
  # Build the SPARQL fragment for this node, by combining everything retrieved above.
  bind(strdt(concat(if(?fragments='','',?fragments)),xsd:string) as ?fragment)
  
}""" ;
    sh:prefixes sparql: .

standard:sparql a dct:Standard ;
    dct:created "2024-04-07"^^xsd:date ;
    dct:source "https://www.w3.org/TR/sparql11-query/"^^xsd:anyURI ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "SPARQL"@en .

target:CharacterSequence a sh:SPARQLTarget ;
    rdfs:comment ""@en ;
    rdfs:isDefinedBy sparql: ;
    sh:prefixes sparql: ;
    sh:select """
select $this {

  # Select all keyword nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:CharacterSequence.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
}""" .

target:Keyword a sh:SPARQLTarget ;
    rdfs:comment ""@en ;
    rdfs:isDefinedBy sparql: ;
    sh:prefixes sparql: ;
    sh:select """
select $this {

  # Select all keyword nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:Keyword.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
}""" .

target:SerializableNode a sh:SPARQLTarget ;
    rdfs:comment "Select non-terminal nodes in a SPARQL Abstract Syntax Tree that do not have a SPARQL fragment yet, and whose child nodes all have a SPARQL fragment already."@en ;
    rdfs:isDefinedBy sparql: ;
    sh:prefixes sparql: ;
    sh:select """
select $this {

  # Select all non-terminal nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:NonTerminalNode.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
  # ...but whose child nodes all have an SPARQL fragment (both non-terminal child nodes and terminal child nodes)
  minus {
    $this ?member ?child.
    filter not exists { ?child sparql:fragment []. }
    ?child a/rdfs:subClassOf* sparql:Node.
  }
}""" .

target:Symbol a sh:SPARQLTarget ;
    rdfs:comment ""@en ;
    rdfs:isDefinedBy sparql: ;
    sh:prefixes sparql: ;
    sh:select """
select $this {

  # Select all keyword nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:Symbol.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
}""" .

target:SymbolSequence a sh:SPARQLTarget ;
    rdfs:comment ""@en ;
    rdfs:isDefinedBy sparql: ;
    sh:prefixes sparql: ;
    sh:select """
select $this {

  # Select all symbol sequence nodes in the SPARQL query...
  $this a/rdfs:subClassOf* sparql:SymbolSequence.
  
  # ...that do not yet have a sparql fragment.
  filter not exists { $this sparql:fragment []. }
  
 # ...but whose child nodes all have an SPARQL fragment 
  minus {
    $this ?member ?child.
    filter not exists { ?child sparql:fragment []. }
    ?child a/rdfs:subClassOf* sparql:Node.
  }
}""" .

ex:additiveExpression1 a sparql:AdditiveExpression ;
    rdf:_1 ex:multiplicativeExpression1 ;
    sparql:fragment "?s"^^xsd:string .

ex:additiveExpression2 a sparql:AdditiveExpression ;
    rdf:_2 ex:multiplicativeExpression2 ;
    sparql:fragment "?o"^^xsd:string .

ex:base a sparql:Base ;
    sparql:fragment "BASE"^^xsd:string .

ex:baseDecl a sparql:BaseDecl ;
    rdf:_1 ex:base ;
    rdf:_2 ex:iriRefBase ;
    sparql:fragment "BASE <https://example.org/>"^^xsd:string .

ex:brackettedExpression a sparql:BrackettedExpression ;
    rdf:_1 ex:openParenthesis ;
    rdf:_2 ex:expression ;
    rdf:_3 ex:closedParenthesis ;
    sparql:fragment "( ?s = ?o )"^^xsd:string .

ex:closedCurlyBracket a sparql:ClosedCurlyBracket ;
    sparql:fragment "}"^^xsd:string .

ex:closedParenthesis a sparql:ClosedParenthesis ;
    sparql:fragment ")"^^xsd:string .

ex:colon a sparql:Colon ;
    sparql:fragment ":"^^xsd:string .

ex:conditionalAndExpression a sparql:ConditionalAndExpression ;
    rdf:_1 ex:valueLogical ;
    sparql:fragment "?s = ?o"^^xsd:string .

ex:conditionalOrExpression a sparql:ConditionalOrExpression ;
    rdf:_1 ex:conditionalAndExpression ;
    sparql:fragment "?s = ?o"^^xsd:string .

ex:constraint a sparql:Constraint ;
    rdf:_1 ex:brackettedExpression ;
    sparql:fragment "( ?s = ?o )"^^xsd:string .

ex:equal a sparql:Equal ;
    sparql:fragment "="^^xsd:string .

ex:exampleQuery a sparql:QueryUnit ;
    rdf:_1 ex:prologue ;
    rdf:_2 ex:selectQuery ;
    sparql:fragment "BASE <https://example.org/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT * WHERE { ?s ?p ?o FILTER ( ?s = ?o ) }"^^xsd:string .

ex:expression a sparql:Expression ;
    rdf:_1 ex:conditionalOrExpression ;
    sparql:fragment "?s = ?o"^^xsd:string .

ex:filter a sparql:Filter ;
    sparql:fragment "FILTER"^^xsd:string .

ex:filterClause a sparql:FilterClause ;
    rdf:_1 ex:filter ;
    rdf:_2 ex:constraint ;
    sparql:fragment "FILTER ( ?s = ?o )"^^xsd:string .

ex:graphNodePath a sparql:GraphNodePath ;
    rdf:_1 ex:varOrTerm2 ;
    sparql:fragment "?o"^^xsd:string .

ex:graphPatternNotTriples a sparql:GraphPatternNotTriples ;
    rdf:_1 ex:filterClause ;
    sparql:fragment "FILTER ( ?s = ?o )"^^xsd:string .

ex:groupGraphPattern a sparql:GroupGraphPattern ;
    rdf:_1 ex:openCurlyBracket ;
    rdf:_2 ex:groupGraphPatternSub ;
    rdf:_3 ex:graphPatternNotTriples ;
    rdf:_4 ex:closedCurlyBracket ;
    sparql:fragment "{ ?s ?p ?o FILTER ( ?s = ?o ) }"^^xsd:string .

ex:groupGraphPatternSub a sparql:GroupGraphPatternSub ;
    rdf:_1 ex:triplesBlock ;
    sparql:fragment "?s ?p ?o"^^xsd:string .

ex:iriRefBase a sparql:IRIRef ;
    rdf:_1 ex:lessThan ;
    rdf:_2 ex:iriValue_Base ;
    rdf:_3 ex:greaterThan ;
    sparql:fragment "<https://example.org/>"^^xsd:string .

ex:iriRef_RDF a sparql:IRIRef ;
    rdf:_1 ex:lessThan ;
    rdf:_2 ex:iriValue_RDF ;
    rdf:_3 ex:greaterThan ;
    sparql:fragment "<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"^^xsd:string .

ex:iriValue_Base a sparql:IRIValue ;
    rdf:value "https://example.org/" ;
    sparql:fragment "https://example.org/" .

ex:iriValue_RDF a sparql:IRIValue ;
    rdf:value "http://www.w3.org/1999/02/22-rdf-syntax-ns#" ;
    sparql:fragment "http://www.w3.org/1999/02/22-rdf-syntax-ns#" .

ex:multiplicativeExpression1 a sparql:MultiplicativeExpression ;
    rdf:_1 ex:unaryExpression1 ;
    sparql:fragment "?s"^^xsd:string .

ex:multiplicativeExpression2 a sparql:MultiplicativeExpression ;
    rdf:_2 ex:unaryExpression2 ;
    sparql:fragment "?o"^^xsd:string .

ex:numericExpression1 a sparql:NumericExpression ;
    rdf:_1 ex:additiveExpression1 ;
    sparql:fragment "?s"^^xsd:string .

ex:numericExpression2 a sparql:NumericExpression ;
    rdf:_2 ex:additiveExpression2 ;
    sparql:fragment "?o"^^xsd:string .

ex:objectListPath a sparql:ObjectListPath ;
    rdf:_1 ex:objectPath ;
    sparql:fragment "?o"^^xsd:string .

ex:objectPath a sparql:ObjectPath ;
    rdf:_1 ex:graphNodePath ;
    sparql:fragment "?o"^^xsd:string .

ex:openCurlyBracket a sparql:OpenCurlyBracket ;
    sparql:fragment "{"^^xsd:string .

ex:openParenthesis a sparql:OpenParenthesis ;
    sparql:fragment "("^^xsd:string .

ex:pname_NS a sparql:PNAME_NS ;
    rdf:_1 ex:prefix_RDF ;
    rdf:_2 ex:colon ;
    sparql:fragment "rdf:"^^xsd:string .

ex:prefix a sparql:Prefix ;
    sparql:fragment "PREFIX"^^xsd:string .

ex:prefixDecl a sparql:PrefixDecl ;
    rdf:_1 ex:prefix ;
    rdf:_2 ex:pname_NS ;
    rdf:_3 ex:iriRef_RDF ;
    sparql:fragment "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"^^xsd:string .

ex:prefix_RDF a sparql:PN_PREFIX ;
    rdf:value "rdf" ;
    sparql:fragment "rdf" .

ex:primaryExpression1 a sparql:PrimaryExpression ;
    rdf:_1 ex:variable_s ;
    sparql:fragment "?s"^^xsd:string .

ex:primaryExpression2 a sparql:PrimaryExpression ;
    rdf:_2 ex:variable_o ;
    sparql:fragment "?o"^^xsd:string .

ex:prologue a sparql:Prologue ;
    rdf:_1 ex:baseDecl ;
    rdf:_2 ex:prefixDecl ;
    sparql:fragment "BASE <https://example.org/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"^^xsd:string .

ex:propertyListPathNotEmpty a sparql:PropertyListPathNotEmpty ;
    rdf:_1 ex:verbSimple ;
    rdf:_2 ex:objectListPath ;
    sparql:fragment "?p ?o"^^xsd:string .

ex:relationalExpression a sparql:RelationalExpression ;
    rdf:_1 ex:numericExpression1 ;
    rdf:_2 ex:equal ;
    rdf:_3 ex:numericExpression2 ;
    sparql:fragment "?s = ?o"^^xsd:string .

ex:select a sparql:Select ;
    sparql:fragment "SELECT"^^xsd:string .

ex:selectClause1 a sparql:SelectClause ;
    rdf:_1 ex:select ;
    rdf:_2 ex:wildcard ;
    sparql:fragment "SELECT *"^^xsd:string .

ex:selectQuery a sparql:SelectQuery ;
    rdf:_1 ex:selectClause1 ;
    rdf:_2 ex:whereClause1 ;
    sparql:fragment "SELECT * WHERE { ?s ?p ?o FILTER ( ?s = ?o ) }"^^xsd:string .

ex:triplesBlock a sparql:TriplesBlock ;
    rdf:_1 ex:triplesSameSubjectPath ;
    sparql:fragment "?s ?p ?o"^^xsd:string .

ex:triplesSameSubjectPath a sparql:TriplesSameSubjectPath ;
    rdf:_1 ex:varOrTerm1 ;
    rdf:_2 ex:propertyListPathNotEmpty ;
    sparql:fragment "?s ?p ?o"^^xsd:string .

ex:unaryExpression1 a sparql:UnaryExpression ;
    rdf:_1 ex:primaryExpression1 ;
    sparql:fragment "?s"^^xsd:string .

ex:unaryExpression2 a sparql:UnaryExpression ;
    rdf:_2 ex:primaryExpression2 ;
    sparql:fragment "?o"^^xsd:string .

ex:valueLogical a sparql:ValueLogical ;
    rdf:_1 ex:relationalExpression ;
    sparql:fragment "?s = ?o"^^xsd:string .

ex:varOrTerm1 a sparql:VarOrTerm ;
    rdf:_1 ex:variable_s ;
    sparql:fragment "?s"^^xsd:string .

ex:varOrTerm2 a sparql:VarOrTerm ;
    rdf:_1 ex:variable_o ;
    sparql:fragment "?o"^^xsd:string .

ex:variable1_o a sparql:Variable1 ;
    rdf:_1 ex:questionMark ;
    rdf:_2 ex:variable1_o_name ;
    sparql:fragment "?o"^^xsd:string .

ex:variable1_o_name a sparql:CharacterSequence ;
    rdf:value "o" ;
    sparql:fragment "o" .

ex:variable1_p a sparql:Variable1 ;
    rdf:_1 ex:questionMark ;
    rdf:_2 ex:variable1_p_name ;
    sparql:fragment "?p"^^xsd:string .

ex:variable1_p_name a sparql:CharacterSequence ;
    rdf:value "p" ;
    sparql:fragment "p" .

ex:variable1_s a sparql:Variable1 ;
    rdf:_1 ex:questionMark ;
    rdf:_2 ex:variable1_s_name ;
    sparql:fragment "?s"^^xsd:string .

ex:variable1_s_name a sparql:CharacterSequence ;
    rdf:value "s" ;
    sparql:fragment "s" .

ex:variable_p a sparql:Variable ;
    rdf:_1 ex:variable1_p ;
    sparql:fragment "?p"^^xsd:string .

ex:verbSimple a sparql:VerbSimple ;
    rdf:_1 ex:variable_p ;
    sparql:fragment "?p"^^xsd:string .

ex:where a sparql:Where ;
    sparql:fragment "WHERE"^^xsd:string .

ex:whereClause1 a sparql:WhereClause ;
    rdf:_1 ex:where ;
    rdf:_2 ex:groupGraphPattern ;
    sparql:fragment "WHERE { ?s ?p ?o FILTER ( ?s = ?o ) }"^^xsd:string .

ex:wildcard a sparql:Wildcard ;
    sparql:fragment "*"^^xsd:string .

section:Tree a dcm:Text ;
    dct:isPartOf standard:sparql ;
    dct:source "https://sparql.org/#node-trees"^^xsd:anyURI ;
    rdfs:isDefinedBy sparql: ;
    skos:prefLabel "Tree"@en .

sparql:AdditiveExpression a owl:Class ;
    dct:conformsTo section:AdditiveExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a numeric expression clause in SPARQL."@en ;
    skos:prefLabel "AdditiveExpression clause"@en .

sparql:IRIRef a owl:Class ;
    dct:conformsTo section:IRIRef ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents an IRIRef in SPARQL."@en ;
    skos:prefLabel "IRI reference"@en .

sparql:IRIValue a owl:Class ;
    dct:conformsTo section:IRIValue ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:CharacterSequence ;
    skos:definition "Represents an IRI value in SPARQL."@en ;
    skos:prefLabel "IRI value"@en .

sparql:MultiplicativeExpression a owl:Class ;
    dct:conformsTo section:MultiplicativeExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a multiplicative expression clause in SPARQL."@en ;
    skos:prefLabel "MultiplicativeExpression clause"@en .

sparql:Node a owl:Class ;
    dct:conformsTo section:Node ;
    rdfs:isDefinedBy sparql: ;
    skos:definition "A node is an object within the SPARQL abstract syntax tree."@en ;
    skos:prefLabel "Node"@en .

sparql:NumericExpression a owl:Class ;
    dct:conformsTo section:NumericExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a numeric expression clause in SPARQL."@en ;
    skos:prefLabel "NumericExpression clause"@en .

sparql:PrimaryExpression a owl:Class ;
    dct:conformsTo section:PrimaryExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a primary expression clause in SPARQL."@en ;
    skos:prefLabel "PrimaryExpression clause"@en .

sparql:UnaryExpression a owl:Class ;
    dct:conformsTo section:UnaryExpression ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents an unary expression clause in SPARQL."@en ;
    skos:prefLabel "UnaryExpression clause"@en .

sparql:VarOrTerm a owl:Class ;
    dct:conformsTo section:VarOrTerm ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition ".."@en ;
    skos:prefLabel "Var or Term"@en .

ex:greaterThan a sparql:GreaterThan ;
    sparql:fragment ">"^^xsd:string .

ex:lessThan a sparql:LessThan ;
    sparql:fragment "<"^^xsd:string .

ex:variable_o a sparql:Variable ;
    rdf:_1 ex:variable1_o ;
    sparql:fragment "?o"^^xsd:string .

ex:variable_s a sparql:Variable ;
    rdf:_1 ex:variable1_s ;
    sparql:fragment "?s"^^xsd:string .

sparql:Variable a owl:Class ;
    dct:conformsTo section:Variable ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:NonTerminalNode ;
    skos:definition "Represents a variable in a select clause in SPARQL."@en ;
    skos:prefLabel "Variable in select clause"@en .

sparql:Variable1 a owl:Class ;
    dct:conformsTo section:Variable ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:SymbolSequence ;
    skos:definition "Represents a variable in a select clause in SPARQL with the question mark notation."@en ;
    skos:prefLabel "Variable in select clause with question mark"@en ;
    sparql:syntax "?" .

ex:questionMark a sparql:QuestionMark ;
    sparql:fragment "?"^^xsd:string .

sparql:TerminalNode a owl:Class ;
    dct:conformsTo section:TerminalNode ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Node ;
    skos:definition "A node that represents a syntactical component in the SPARQL abstract syntax tree, i.e. a keyword or symbol."@en ;
    skos:prefLabel "Terminal node"@en .

sparql:CharacterSequence a owl:Class ;
    dct:conformsTo section:CharacterSequence ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:TerminalNode ;
    skos:definition "A character sequence in the SPARQL syntax."@en ;
    skos:example "\"s\" in \"?s\" or \"https://example.org\" in \"<https://example.org>\"" ;
    skos:prefLabel "Character sequence"@en .

sparql:SymbolSequence a owl:Class ;
    dct:conformsTo section:SymbolSequence ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:TerminalNode ;
    skos:definition "A symbol sequence in the SPARQL syntax."@en ;
    skos:example "\"?s\" or \"<https://example.org>\"" ;
    skos:prefLabel "Symbol sequence"@en .

sparql:Symbol a owl:Class ;
    dct:conformsTo section:Symbol ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:TerminalNode ;
    skos:definition "A symbol in the SPARQL syntax."@en ;
    skos:prefLabel "Symbol"@en .

sparql:Keyword a owl:Class ;
    dct:conformsTo section:Keyword ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:TerminalNode ;
    skos:definition "A keyword in the SPARQL syntax."@en ;
    skos:prefLabel "Keyword"@en .

sparql:NonTerminalNode a owl:Class ;
    dct:conformsTo section:StructuralNode ;
    rdfs:isDefinedBy sparql: ;
    rdfs:subClassOf sparql:Node ;
    skos:definition "A node that represents a structural component in the SPARQL abstract syntax tree."@en ;
    skos:prefLabel "Non-terminal node"@en .

sparql: a void:Dataset,
        owl:Ontology ;
    dct:abstract "SPARQL Vocabulary"@en ;
    dct:created "2023-10-29"^^xsd:date ;
    dct:creator "Flores Bakker",
        "Wouter Beek" ;
    dct:description "SPARQL Vocabulary"@en ;
    dct:language "iso639-1:en" ;
    dct:license "http://creativecommons.org/licenses/by/4.0"^^xsd:anyURI ;
    dct:publisher <https://rijksfinancien.nl> ;
    dct:source <https://github.com/floresbakker/sparqlvoc> ;
    dct:status status:UnderDevelopment ;
    dct:subject "SPARQL"@en ;
    dct:title "SPARQL Vocabulary"@en ;
    vann:preferredNamespacePrefix "sparql" ;
    vann:preferredNamespaceUri "http://www.w3.org/ns/sparql#model/def/" ;
    void:uriRegexPattern "^http://www.w3.org/ns/sparql#model/def/" ;
    void:uriSpace "http://www.w3.org/ns/sparql#model/def/"^^xsd:anyURI ;
    owl:imports dct:,
        rdf:,
        rdfs:,
        owl:,
        skos: ;
    owl:versionInfo "0.1.0" ;
    sh:declare decl:prov,
        decl:rdf,
        decl:rdfs,
        decl:sparql,
        decl:xsd ;
    foaf:depiction "https://www.rijksfinancien.nl/themes/custom/indicia_theme/files/logo-rijksoverheid.svg"^^xsd:anyURI ;
    foaf:homepage "https://www.rijksfinancien.nl/"^^xsd:anyURI .

